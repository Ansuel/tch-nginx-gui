local logger = require("transformer.logger")
local log = logger.new("rpc.xdslctl", 2)
local register = register;

local xdslctl_ = {
    objectType = {
        name = 'rpc.xdslctl.',
        access = 'readOnly',
        minEntries = 1,
        maxEntries = 1,
        parameters = {
          Hlog = {
            access = "readOnly",
            type = "string"
          },
		  HlogScanBand = {
            access = "readOnly",
            type = "string"
          },
		  Bits = {
            access = "readOnly",
            type = "string"
          },
		  BitsScanBand = {
            access = "readOnly",
            type = "string"
          },
		  QLN = {
            access = "readOnly",
            type = "string"
          },
		  QLNScanBand = {
            access = "readOnly",
            type = "string"
          },
		  SNR = {
            access = "readOnly",
            type = "string"
          },
		  SNRScanBand = {
            access = "readOnly",
            type = "string"
          },
		  Us1BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us2BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us3BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us4BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us1BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us2BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us3BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us4BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  UsBandNumber = {
            access = "readOnly",
            type = "string"
          },
        }
    }
}

local function xdslctlget(dtype,request)
    local data = ""
	local n  = 0
	local scanband = ""
	os.execute("xdslctl info --" .. request .. " > /tmp/" .. request)
	
	local f = io.open("/tmp/" .. request,"r")
	
	for l in f:lines() do
		if n>8 then 
			if request == "Hlog" then
				l = l:gsub("(.*)-","")
				l = "-" .. l
				if ( tonumber(l) > -96 ) then 
					data = data .. l .. ", "
				else
					data = data .. "NaN" .. ", "
				end
			elseif request == "QLN" then
				l = l:gsub("(.*)-","")
				l = "-" .. l
				if ( tonumber(l) > -160 ) then 
					data = data .. l .. ", "
				else
					data = data .. "NaN" .. ", "
				end
			elseif request == "SNR" then
				l = string.sub(l,-8)
				l = l:gsub("%s*","")
				if ( tonumber(l) > 0 ) then 
					data = data .. l .. ", "
				else
					data = data .. "NaN" .. ", "
				end
			else
				l = string.sub(l,-2)
				l = l:gsub("%s*","")
				data = data .. l .. ", "
			end
		end
		n=n+1
	end
	f:close()
	
	scanband = tostring(n-8)
	
	local file = io.open("/tmp/" .. request .. "Param","w+")
	io.output(file)
	io.write(data)
	io.close(file)
	
	os.execute("rm /tmp/" .. request)
	if dtype == "data" then
		return data
	else
		return scanband
	end
end

local function xdslusband(n,dtype)
	local cmd = ("xdslctl info --pbParams | sed -n 12p") 
	local f = assert(io.popen(cmd, 'r'))
	local s = assert(f:read('*a'))
	local r = "0"
	local c = 1
	f:close()
	s = string.gsub(s, '[\n\r]+', ' ')
	for w in string.gmatch (s, "%((.-)%)") do
		if c == n then
			if dtype == "Initial" then
				r = string.match(w,"(.-)%,")
			elseif dtype == "Final" then
				r = string.match(w,"%,(%d*)")
			end
		end
		c=c+1
	end
	if dtype == "BandNumber" then
		return tostring(c-1)
	else
		return r
	end
end

local function get(mapping, paramName, key)
	if paramName == "Hlog" then
		local Hlog = xdslctlget("data","Hlog")
		return Hlog
	elseif paramName == "HlogScanBand" then
		local HlogScanBand = xdslctlget("scanband","Hlog")
		return HlogScanBand
	elseif paramName == "Bits" then
		local Bits = xdslctlget("data","Bits")
		return Bits
	elseif paramName == "BitsScanBand" then
		local BitsScanBand = xdslctlget("scanband","Bits")
		return BitsScanBand
	elseif paramName == "QLN" then
		local QLN = xdslctlget("data","QLN")
		return QLN
	elseif paramName == "QLNScanBand" then
		local QLNScanBand = xdslctlget("scanband","QLN")
		return QLNScanBand
	elseif paramName == "SNR" then
		local SNR = xdslctlget("data","SNR")
		return SNR
	elseif paramName == "SNRScanBand" then
		local SNRScanBand = xdslctlget("scanband","SNR")
		return SNRScanBand
	elseif paramName == "Us1BandFinal" then
		local Us1BandFinal = xdslusband(1,"Final")
		return Us1BandFinal
	elseif paramName == "Us2BandFinal" then
		local Us2BandFinal = xdslusband(2,"Final")
		return Us2BandFinal
	elseif paramName == "Us3BandFinal" then
		local Us3BandFinal = xdslusband(3,"Final")
		return Us3BandFinal
	elseif paramName == "Us4BandFinal" then
		local Us4BandFinal = xdslusband(4,"Final")
		return Us4BandFinal
	elseif paramName == "Us1BandInitial" then
		local Us1BandInitial = xdslusband(1,"Initial")
		return Us1BandInitial
	elseif paramName == "Us2BandInitial" then
		local Us2BandInitial = xdslusband(2,"Initial")
		return Us2BandInitial
	elseif paramName == "Us3BandInitial" then
		local Us3BandInitial = xdslusband(3,"Initial")
		return Us3BandInitial
	elseif paramName == "Us4BandInitial" then
		local Us4BandInitial = xdslusband(4,"Initial")
		return Us4BandInitial
	elseif paramName == "UsBandNumber" then
		local UsBandNumber = xdslusband(0,"BandNumber")
		return UsBandNumber
	end
end

xdslctl_.get = get

register(xdslctl_)