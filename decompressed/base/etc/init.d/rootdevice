#!/bin/ash /etc/rc.common

#
#
#	 Custom Gui for Technicolor Modem: utility script and modified gui for the 
#	 								   Technicolor Modem interface based on OpenWrt
#
#    Copyright (C) 2018  Christian Marangi <ansuelsmth@gmail.com>
#
#    This file is part of Custom Gui for Technicolor Modem.
#    
#    Custom Gui for Technicolor Modem is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#    
#    Custom Gui for Technicolor Modem is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with Custom Gui for Technicolor Modem.  If not, see <http://www.gnu.org/licenses/>.
#
#

START=94
EXTRA_COMMANDS="force debug"
EXTRA_HELP="\
        force   Force root process even when root flag is already set
        debug   force command with debug log
		install    This root the device for the initial installation
"

version_gui=8.8.12

logo_project() {
cat << EOF > /dev/console

 █████╗ ███╗   ██╗███████╗██╗   ██╗███████╗██╗     
██╔══██╗████╗  ██║██╔════╝██║   ██║██╔════╝██║     
███████║██╔██╗ ██║███████╗██║   ██║█████╗  ██║     
██╔══██║██║╚██╗██║╚════██║██║   ██║██╔══╝  ██║     
██║  ██║██║ ╚████║███████║╚██████╔╝███████╗███████╗
╚═╝  ╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚══════╝╚══════╝
(Modified Gui RootScript)                  (Christo)

EOF

logger << EOF

                                     _ 
     /\  (Modified Gui RootScript)  | |
    /  \    _ __   ___  _   _   ___ | |
   / /\ \  | '_ \ / __|| | | | / _ \| |
  / ____ \ | | | |\__ \| |_| ||  __/| |
 /_/    \_\|_| |_||___/ \__,_| \___||_|
                                       
                             (Christo) 
EOF
}

check_root() {
	
	config_load "system"
	
	config_get_bool rooted config rooted 0
	
cat << EOF > /dev/console
 === IMPORTANT =======================================
  Checking root...
EOF
}

logger_command() {
	if [ $debug  -eq 1 ]; then
		logger -s -t "Root Script" "$1"
	fi
}

add_ipv6() {
	uci set network.wan_ipv6=interface
	uci set network.wan_ipv6.auto='0'
	uci set network.wan_ipv6.proto='pppoe'
	uci set network.wan_ipv6.demand='0'
	uci set network.wan_ipv6.password='IPV6@alice6'
	uci set network.wan_ipv6.macaddr=$(uci -q get network.wan.macaddr)
	uci set network.wan_ipv6.ipv6='1'
	uci set network.wan_ipv6.peerdns='1'
	uci set network.wan_ipv6.keepalive_adaptive='0'
	uci set network.wan_ipv6.dns_metric='0'
	uci set network.wan_ipv6.ifname='wanptm0'
	uci set network.wan_ipv6.username=$(uci -q get env.var.serial)-$(uci -q get env.var.oui)@alice6.it
	uci set network.wan_ipv6.metric='10'
	uci set network.wan6.ifname='@wan_ipv6'
}

add_ipoe() {
	uci set network.ipoe=interface
	uci set network.ipoe.proto='dhcp'
	uci set network.ipoe.metric='1'
	uci set network.ipoe.reqopts='1 3 6 43 51 58 59'
	uci set network.ipoe.release='1'
	uci set network.ipoe.neighreachabletime='1200000'
	uci set network.ipoe.neighgcstaletime='2400'
	uci set network.ipoe.ipv6='1'
}

remove_default_dns() {
	uci -q del network.loopback.dns
	uci -q del network.loopback.dns_metric
}

setup_network() {
	#Set a pppoerelay empty interface if list is not present (UNO)
	if [ ! $(uci show network.lan | grep "network.lan.pppoerelay") ]; then
		uci -q add_list network.lan.pppoerelay=''
	fi
	
	#Set a waneth4 interface if not found (fix wizard on UNO)
	if [ ! $(uci -q get network.waneth4) ]; then
		uci -q add network device > /dev/null
		uci -q rename network.@device[-1]=waneth4
		uci -q set network.waneth4.enabled=1
		uci -q set network.waneth4.type=8021q
		uci -q set network.waneth4.name=waneth4
		uci -q set network.waneth4.vid=835
	fi
	if [ ! $(uci -q get network.waneth4.vid) ]; then
		uci -q set network.waneth4.vid=835
	fi

    #Set a wanptm0 interface if not found (fix wizard on UNO)
    if [ ! $(uci -q get network.wanptm0) ]; then
        uci -q add network device > /dev/null
        uci -q rename network.@device[-1]=wanptm0
        uci -q set network.wanptm0.enabled=1
        uci -q set network.wanptm0.type=8021q
        uci -q set network.wanptm0.name=wanptm0
        uci -q set network.wanptm0.vid=835
    fi
	if [ ! $(uci -q get network.wanptm0.vid) ]; then
		uci -q set network.wanptm0.vid=835
	fi

	#Set a SSH_wan firewall rule if not found (fix SSH Wan not working)
	if [ ! $(uci -q get firewall.SSH_wan) ]; then
		uci -q add firewall rule > /dev/null
		uci -q rename firewall.@rule[-1]=SSH_wan
		uci -q set firewall.SSH_wan.src=wan
		uci -q set firewall.SSH_wan.name=SSH_wan
		uci -q set firewall.SSH_wan.target=DROP
		uci -q set firewall.SSH_wan.proto=tcp
		uci -q set firewall.SSH_wan.dest_port=22
		uci -q set firewall.SSH_wan.family=ipv4
	fi
}

add_ppp_mgmt() {
	uci set env.var.ppp_mgmt=$(uci -q get env.var.serial)-$(uci -q get env.var.oui)@00000.aliceres.mgmt
}

puryfy_wan_interface() { #creano problemi di dns per chissa'  quale diavolo di motivo... Ma l'utilitÃ  di sta roba eh telecom ? 
	uci -q del network.wan.keepalive
	uci -q del network.wan.graceful_restart
	uci -q del network.wan_ipv6.keepalive
	uci -q del network.wan_ipv6.graceful_restart
}

fix_dns_dhcp_bug() {
	uci set dhcp.odhcpd.maindhcp="0"
	if [ $(pgrep "odhcpd") ]; then
		/etc/init.d/odhcpd stop
		killall dnsmasq
		/etc/init.d/dnsmasq restart
	fi
	if [ "$(ls /etc/rc.d/ | grep odhcpd)" ]; then
		/etc/init.d/odhcpd disable
	fi
}

purify_from_tim() {
	uci -q del env.var.ppp_mgmt
	uci -q del network.wan_ipv6
	uci -q del dhcp.dnsmasq.server
}

encrypted_pass=$(awk -F: '/root/ {print $2 }' /etc/shadow)
default_encrypted_pass='$5liEJpfo7NYE'
saved_encrypted_pass=$(uci -q get env.var.encrypted_pass)

save_root_encrypt_pass() {
	echo "  Storing encrypted password..." > /dev/console
	uci set env.var.encrypted_pass=$encrypted_pass
}

cumulative_check_gui() {
	#This create update_branch entities
	if [ ! $(uci get -q env.var.update_branch) ]; then
		uci set env.var.update_branch="stable"
		update_branch=""
		logger_command "Setting update branch to STABLE"
	elif [ $(uci get -q env.var.update_branch) == "stable" ]; then
		update_branch=""
		logger_command "Update branch detected: STABLE"
	else
		update_branch="_dev"
		logger_command "Update branch detected: DEV"
	fi
	
	
	#This make sure we have stable GUI in /root
	if [ ! -f /root/GUI.tar.bz2 ]; then
		logger_command "Stable GUI not found in /root"
		if [ ! -f /tmp/GUI.tar.bz2 ]; then
			logger_command "Stable GUI not found in /tmp, downloading if possible..."
			if ping -q -c 1 -W 1 8.8.8.8 >/dev/null 2>&1; then
			        curl -k -s https://repository.ilpuntotecnico.com//files/Ansuel/AGTEF/GUI.tar.bz2 --output /root/GUI.tar.bz2
			else
				logger_command "Can't download stable GUI!"
			fi
		else
			logger_command "Moving stable GUI from /tmp to /root"
			cp /tmp/GUI.tar.bz2 /root
		fi
		if [ -f /root/GUI.tar.bz2 ]; then
			logger_command "Assume first times install, cleaning /www dir and reinstall"
			rm -r /www/*
			bzcat /root/GUI.tar.bz2 | tar -C / -xf - www
		fi
	fi
	
	logger_command "Updating GUI in /root folder from /tmp"
	
	#This move tmp gui in /root
	if [ -f /tmp/GUI$update_branch.tar.bz2 ]; then
		if [ -f /root/GUI$update_branch.tar.bz2 ]; then
			rm /root/GUI$update_branch.tar.bz2
		fi
		mv /tmp/GUI$update_branch.tar.bz2 /root/GUI$update_branch.tar.bz2
	fi
	
	
	
	#This generate new hash
	if [ -f /root/GUI$update_branch.tar.bz2 ]; then
		old_gui_hash=$(uci get -q env.var.gui_hash)
		gui_hash=$(md5sum /root/GUI$update_branch.tar.bz2 | awk '{ print $1}' )
		if [ "$old_gui_hash" != "gui_hash" ]; then
			logger_command "Detected upgrade!"
			logger_command "Old GUI hash: $old_gui_hash"
			logger_command "New GUI hash: $gui_hash"
		else
			logger_command "GUI hash set: $old_gui_hash"
		fi
	else
		logger_command "Can't generate GUI hash, file not found!"
		gui_hash="0"
	fi
	
	logger_command "Resetting version info..."
	
	if [ ! $(uci get -q env.var.gui_hash) ]; then
		uci set env.var.new_ver="Unknown"
		uci set env.var.gui_hash=$gui_hash
		uci set env.var.outdated_ver='0'
	elif [ $(uci get -q env.var.gui_hash) != $gui_hash ]; then
		uci set env.var.new_ver="Unknown"
		uci set env.var.gui_hash=$gui_hash
		uci set env.var.outdated_ver='0'
	fi
	if [ ! $(uci get -q env.var.autoupgrade) ]; then
		uci set env.var.autoupgrade_hour=0
		uci set env.var.autoupgrade=0
	fi
	if [ ! $(uci get -q env.var.autoupgradeview) ]; then
		uci set env.var.autoupgradeview="none"
	fi
	if [ ! $(uci get -q env.var.firstpage) ]; then
		uci set env.var.firstpage="stats"
	fi
	if [ ! $(uci get -q env.var.randomcolor) ]; then
		uci set env.var.randomcolor="0"
	fi
}

transfer_bank() {
	if [ -d /overlay/bank_1 ]; then
		rm -r /overlay/bank_1
	fi
	mkdir /overlay/bank_1
	cp -a /overlay/bank_2/* /overlay/bank_1/
	if [ -f /overlay/bank_1/etc/init.d/rootdevice ]; then
		#mtd erase /dev/mtd3
		mtd write /dev/mtd4 /dev/mtd3
	fi
	activeversion=$( cat /proc/banktable/activeversion )
	passiveversion=$( cat /proc/banktable/passiveversion )
	
	if [ "$activeversion" == "$passiveversion" ]; then
		echo bank_1 > /proc/banktable/active
		reboot
	fi
}

restore_bank() {
	bootedbank=$( cat /proc/banktable/booted )
	activebank=$( cat /proc/banktable/active )
	if [ -f /overlay/$activebank ]; then
		rm -r /overlay/$activebank
	fi
	mkdir /overlay/$activebank
	cp -a /overlay/$bootedbank/* /overlay/$activebank
	if [ -f /overlay/$activebank/etc/init.d/rootdevice ]; then
		if [ $bootedbank == "bank_1" ]; then
			mtd write /dev/mtd3 /dev/mtd4
		else
			mtd write /dev/mtd4 /dev/mtd3
		fi
	fi
	
	if [ "$activeversion" == "$passiveversion" ]; then
		echo $bootedbank > /proc/banktable/active
		reboot
	fi
}

check_bank() {
	bank_check=$( uci get -q env.var.bank_check )
	bootedbank=$( cat /proc/banktable/booted )
	activebank=$( cat /proc/banktable/active )
	env_config_bank1="/overlay/bank_1/etc/config/env"
	get_config_bank1=$(cat /etc/config/env | grep bank_check | awk '{print $3}' | sed "s/'//g")
	if [ $bootedbank != $activebank ]; then
		echo "  Detected corrupted active bank... Restoring..." > /dev/console
		restore_bank
	fi
		
	if [ $bootedbank == "bank_2" ]; then
		if [ ! $( uci -q get env.var.bank_check ) ]; then
			if [ -f $env_config_bank1 ] && [ $get_config_bank1 == "0" ]; then
				echo "  Firmware in Bank_2 but check_bank set to 0... Not transferring" > /dev/console
			else
				echo "  Firmware in Bank_2... Transferring" > /dev/console
				transfer_bank
			fi
		elif [ $bank_check == "1" ]; then
			if [ -f $env_config_bank1 ] && [ $get_config_bank1 == "0" ]; then
				echo "  Firmware in Bank_2 but check_bank set to 0... Not transferring" > /dev/console
			else
				echo "  Firmware in Bank_2... Transferring" > /dev/console
				transfer_bank
			fi
		fi
	else
		echo "  Firmware in Bank_1... Not transferring..." > /dev/console
	fi
}

check_gui_ver() {
	if [ "$(uci -q get env.var.gui_version)" != $version_gui ]; then
		uci set env.var.gui_version=$version_gui
	fi
}

check_new_dlnad() {
	if [ -f /etc/init.d/dland ] && [ ! -k /etc/rc.d/S98dlnad ] && [ -f /etc/init.d/minidlna ]; then
		if [ "$(pgrep "minidlna")" ] ; then
			/etc/init.d/minidlna stop
		fi
		/etc/init.d/minidlna disable
		/etc/init.d/dlnad enable
		if [ ! "$(pgrep "dlnad")" ] ; then
			/etc/init.d/dlnad start
		fi
	fi
	if [ -f /rom/usr/bin/dlnad ]; then
		if [ "$(md5sum /rom/usr/bin/dlnad | awk '{print $1}')" !=  "$(md5sum /usr/bin/dlnad | awk '{print $1}')" ]; then
			if [ "$(pgrep "dlnad")" ] ; then
				/etc/init.d/dlnad stop
			fi
			rm /usr/bin/dlnad
			cp /rom/usr/bin/dlnad /usr/bin/dlnad
			cp /rom/etc/init.d/dlnad /etc/init.d/dlnad
			/etc/init.d/dlnad start
		fi
	fi
}

check_upgrade_shit() {
	if [ -f /lib/upgrade/resetgui.sh ]; then
		rm /lib/upgrade/resetgui.sh
		rm /lib/upgrade/transfer_bank1.sh
		rm /lib/upgrade/upgradegui.sh 
		rm /lib/upgrade/checkver.sh 
		rm /lib/upgrade/hardreset.sh
	fi
}

check_isp_config() {
	ppp_user=$(uci -q get network.wan.username)
	cwmp_url=$(uci -q get cwmpd.cwmpd_config.acs_url)
	if  [ ! "$ppp_user" ]; then
		uci set env.var.isp="Other"
		purify_from_tim
	else
		if echo "$ppp_user" | grep -q "alice" || 
		   echo "$ppp_user" | grep -q "agcombo" || 
		   echo "$ppp_user" | grep -q "unica" || 
		   echo "$ppp_user" | grep -q "aliceres" ||
		   echo "$ppp_user" | grep -q "@00000." ; 
		then
			uci set env.var.isp="TIM"
		elif echo "$ppp_user" | grep -q "tiscali.it" || #acs tiscali is preconfigured 
			echo "$cwmp_url" | grep -q "tiscali.it" ; then #on tiscali firmware only
			uci set env.var.isp="Tiscali"
		else
			uci set env.var.isp="Other"
			purify_from_tim
		fi
	fi
}

create_symlink() {
	if [ -f /bin/busybox_telnet ]; then
		ln -sf ../../bin/busybox_telnet /usr/sbin/telnetd
		/etc/init.d/telnet enable
	fi
	if [ ! -f /etc/rc.d/S70wol ]; then 
		/etc/init.d/wol enable
	fi
}

orig_config_gen() {
	if [ ! -f /etc/config/wol ] && [ -f /etc/config/wol_orig ]; then
		mv /etc/config/wol_orig /etc/config/wol
	else
		if [ -f /etc/config/wol_orig ]; then
			rm /etc/config/wol_orig
		fi
	fi
	if [ ! -f /etc/config/dlnad ] && [ -f /etc/config/dlnad_orig ]; then
		mv /etc/config/dlnad_orig /etc/config/dlnad
	else
		if [ -f /etc/config/dlnad_orig ]; then
			rm /etc/config/dlnad_orig
		fi
	fi
	if [ ! -f /etc/config/telnet ] && [ -f /etc/config/telnet_orig ]; then
		mv /etc/config/telnet_orig /etc/config/telnet
	else
		if [ -f /etc/config/telnet_orig ]; then
			rm /etc/config/telnet_orig
		fi
	fi
}

trafficmon_support() {
	if [ -d /root/trafficmon ]; then
		killall trafficmon
		rm -rf /root/trafficmon
	fi
	if [ -f /etc/init.d/trafficmon ] && [ ! -k /etc/rc.d/S99trafficmon ] && [ ! -d /tmp/trafficmon ]; then
		/etc/init.d/trafficmon enable
		if [ ! "$(pgrep "trafficmon.lua")" ]; then
			/etc/init.d/trafficmon start
		fi
	fi
	
}

checkver_cron() {
	if [ $(ls -l /etc/crontabs/root | awk '{print $3}') != "root" ]; then
		rm /etc/crontabs/root #THIS CHECK A VALID ROOT CRON... we remove it as it's useless if the owner is not root.
	fi							#so someone should check it anyway
	if [ -f /etc/crontabs/root ]; then
		if [ ! "$(cat /etc/crontabs/root | grep checkver)" ] ; then
			echo "0 5 * * * /usr/share/transformer/scripts/checkver Schedule >/dev/null 2>&1" >> /etc/crontabs/root
			/etc/init.d/cron restart
		fi
		if [ -f /etc/crontabs/root_gui ]; then
			rm /etc/crontabs/root_gui
		fi
		if [ ! "$(cat /etc/crontabs/root | grep Schedule)" ] && [ "$(cat /etc/crontabs/root | grep checkver)" ]; then
			sed -e /scripts/d -i /etc/crontabs/root
			echo "0 5 * * * /usr/share/transformer/scripts/checkver Schedule >/dev/null 2>&1" >> /etc/crontabs/root
			/etc/init.d/cron restart
		fi
	else
		if [ -f /etc/crontabs/root_gui ]; then
			mv /etc/crontabs/root_gui /etc/crontabs/root
			/etc/init.d/cron restart
		fi
	fi	
}

restore_original_mapper() {
	
	local orig_dir=/rom/usr/share/transformer/mappings
	local target=/usr/share/transformer/mappings
	
	if [ $(md5sum $orig_dir/device2/Device.map | awk '{print $1}') != $(md5sum $target/device2/Device.map | awk '{print $1}') ]; then
		mkdir /tmp/tmp_bff_file
		cp $target/bbf/VoiceService* /tmp/tmp_bff_file/
		rm -r $target/bbf/*
		rm -r $target/device2/*
		rm -r $target/clash/*
		rm -r $target/igd/*
		cp $orig_dir/bbf/* $target/bbf
		cp $orig_dir/clash/* $target/clash
		cp $orig_dir/device2/* $target/device2
		cp $orig_dir/igd/* $target/igd
		cp /tmp/tmp_bff_file/* $target/bbf
		rm -r /tmp/tmp_bff_file
		logger_command "Restoring mapper device file"
	fi
	if [ ! -f $target/bbf/VoiceService.VoiceProfile.Line.map ]; then
		cp $orig_dir$mapper/bbf/VoiceService.VoiceProfile.Line.map $orig_dir$mapper/bbf/
	elif [ $(md5sum $orig_dir/bbf/VoiceService.VoiceProfile.Line.map | awk '{print $1}') != $(md5sum $target/bbf/VoiceService.VoiceProfile.Line.map | awk '{print $1}') ]; then
		rm $target$mapper/bbf/VoiceService.VoiceProfile.Line.map
		cp $orig_dir$mapper/bbf/VoiceService.VoiceProfile.Line.map $orig_dir$mapper/bbf/
	fi #Solve some problems with cwmp AGTEF_1.0.3
	
	#Remove ignored Root device naming from transformer
	uci del_list transformer.@main[0].ignore_patterns='^Device%.'
	uci del_list transformer.@main[0].ignore_patterns='^InternetGatewayDevice%.'
}

transformer_lib_check() {
	local orig_dir=/rom/usr
	local target=/usr
	
	if [ $(md5sum $orig_dir/lib/lua/transformer/shared/dhcp.lua | awk '{print $1}') != $(md5sum $target/lib/lua/transformer/shared/dhcp.lua | awk '{print $1}') ]; then
		rm $target/share/transformer/mappings/rpc/*
		rm $target/share/transformer/mappings/uci/*
		rm -r $target/lib/lua/tch/*
		rm -r $target/lib/lua/transformer/*
		cp $orig_dir/share/transformer/mappings/rpc/* $target/share/transformer/mappings/rpc
		cp $orig_dir/share/transformer/mappings/uci/* $target/share/transformer/mappings/uci
		cp $orig_dir/bin/transformer $target/bin/
		cp -r $orig_dir/lib/lua/tch/* $target/lib/lua/tch
		cp -r $orig_dir/lib/lua/transformer/* $target/lib/lua/transformer
		gui_pos=""
		if [ -f /root/GUI.tar.bz2 ]; then
			gui_pos=/root/GUI.tar.bz2
		elif [ -f /root/GUI_dev.tar.bz2 ]; then
			gui_pos=/root/GUI_dev.tar.bz2
		elif [ -f /tmp/GUI.tar.bz2 ]; then
			gui_pos=/tmp/GUI.tar.bz2
		elif [ -f /tmp/GUI_dev.tar.bz2 ]; then
			gui_pos=/root/GUI_dev.tar.bz2
		fi
		if [ $gui_pos != "" ]; then
			bzcat $gui_pos | tar -C / -xf - #reapply the upgrade as in the gui we store some of this file that we restored
			logger_command "Restoring transformer lib"
		fi
		#/etc/init.d/transformer restart
	fi
}

check_uci_gui_skin() {
	if [ ! $( uci get -q env.var.gui_skin ) ]; then
		uci set env.var.gui_skin="green"
	fi
}

remove_https_check_cwmpd() {
	uci set cwmpd.cwmpd_config.enforce_https='0'
	uci set cwmpd.cwmpd_config.ssl_verifypeer='0'
}

add_telecom_stock_dns() {
	uci set dhcp.dnsmasq.server='151.99.125.1'
}

check_dnsmasq_name() {
	if [ "$( uci show dhcp | grep dhcp.@dnsmasq )" ]; then
		uci rename dhcp.@dnsmasq[0]=dnsmasq
	fi
}

create_driver_setting() {
	if [ ! $( uci get -q env.var.driver_version ) ]; then
		uci set env.var.driver_version=$(transformer-cli get rpc.xdsl.dslversion | awk '{print $4}')
	fi
}

dropbear_file_check() {
	if [ -f /etc/config/dropbear_new ]; then
		if [ $(uci get -q dropbear.wan.enable) ]; then
			rm /etc/config/dropbear_new
		else
			rm /etc/config/dropbear
			mv /etc/config/dropbear_new /etc/config/dropbear
		fi
	fi
}

check_noip_file() {
	if [ -d /etc/ddns_new ]; then
		if [ -d /etc/ddns ]; then
				rm -r /etc/ddns_new
		else
			mv /etc/ddns_new /etc/ddns
		fi
	fi
}

eco_param() {
	uci set power.ethernet.eee='0'
	uci set power.ethernet.autogreeen='0'
	uci set power.ethernet.ethapd='0'
	if [ ! $(uci get -q power.cpu) ]; then
		uci set power.cpu=cpu
		uci set power.cpu.cpuspeed='256'
		uci set power.cpu.wait='1'
	fi
}

enable_new_upnp() {
	if [ -f /etc/init.d/miniupnpd ]; then
		if [ $(uci get -q upnpd.config.enable_upnp) ]; then
			if [ $(uci get -q upnpd.config.enable_upnp) == "1" ]; then
				/etc/init.d/miniupnpd-tch stop
				/etc/init.d/miniupnpd-tch disable
				/etc/init.d/miniupnpd enable
				if [ ! "$(pgrep "miniupnpd")" ]; then
					/etc/init.d/miniupnpd restart
				fi
			fi
		fi
	fi
}

wifi_fix_24g() {
	wl down
	wl obss_prot set 0
	wl -i wl0 gmode Performance
	wl -i wl0 up
	
}

create_gui_type() {
	if [ ! $( uci get -q env.var.aria2_webui) ]; then
		if [ -d /www/docroot/aria ]; then
			uci set env.var.aria2_webui="1"
		else
			uci set env.var.aria2_webui="0"
		fi
	elif [ $( uci get -q env.var.aria2_webui) == "1" ] &&
	[ ! -d /www/docroot/aria ] && 
	[ -f /usr/share/transformer/scripts/install_aria2.sh ]; then 
		#this restore aria... my bad for this bug...
		/usr/share/transformer/scripts/install_aria2.sh
	fi
	if [ ! $( uci get -q env.var.luci_webui) ]; then
		if [ -d /www_luci ]; then
			uci set env.var.luci_webui="1"
		else
			uci set env.var.luci_webui="0"
		fi
	fi
	if [ ! $( uci get -q env.var.transmission_webui) ]; then
		if [ -d /www/docroot/transmission ]; then
			uci set env.var.transmission_webui="1"
		else
			uci set env.var.transmission_webui="0"
		fi
	fi
	if [ ! $( uci get -q env.var.xupnp_app) ]; then
		if [ -d /usr/share/xupnpd ]; then
			uci set env.var.xupnp_app="1"
		else
			uci set env.var.xupnp_app="0"
		fi
	fi
	if [ ! $( uci get -q env.var.blacklist_app) ]; then
		if [ -d /etc/asterisk ]; then
			uci set env.var.blacklist_app="1"
		else
			uci set env.var.blacklist_app="0"
		fi
	elif [ $( uci get -q env.var.blacklist_app) == "1" ] && 
	[ ! -f /www/docroot/modals/mmpbx-contacts-modal.lp.orig ] &&
	[ -f /usr/share/transformer/scripts/install_blacklist.sh ]; then
		/usr/share/transformer/scripts/install_blacklist.sh
	fi
}

update_dhcp_config() {
	if [ $(uci get -q dhcp.lan.dhcpv4) ]; then
		if [ $(uci get -q dhcp.lan.dhcpv4)  == "1" ]; then
			uci set dhcp.lan.dhcpv4='server'
		fi
		if [ $(uci get -q dhcp.lan.dhcpv4) == "0" ]; then
			uci set dhcp.lan.dhcpv4='disabled'
		fi
	else
		uci set dhcp.lan.dhcpv4='server'
	fi
	if [ ! $(uci get -q dhcp.lan.ignore) ]; then
		uci set dhcp.lan.ignore='0'
	fi
}

add_new_web_rule() {
	if [ ! $(uci get -q web.applicationsmodal) ]; then
		uci set web.applicationsmodal=rule
		uci set web.applicationsmodal.target='/modals/applications-modal.lp'
		uci add_list web.applicationsmodal.roles='admin' 
		uci add_list web.applicationsmodal.roles='engineer'
		uci add_list web.ruleset_main.rules='applicationsmodal'
	fi
	if [ ! $(uci get -q web.ajaxgatewaytab) ]; then
		uci set web.ajaxgatewaytab=rule
		uci set web.ajaxgatewaytab.target='/ajax/cpuload.lua'
		uci add_list web.ajaxgatewaytab.roles='admin' 
		uci add_list web.ajaxgatewaytab.roles='engineer'
		uci add_list web.ajaxgatewaytab.roles='guest'
		uci add_list web.ruleset_main.rules='ajaxgatewaytab'
	fi
	if [ ! $(uci get -q web.ajaxinternet) ]; then
		uci set web.ajaxinternet=rule
		uci set web.ajaxinternet.target='/ajax/internet.lua'
		uci add_list web.ajaxinternet.roles='admin' 
		uci add_list web.ajaxinternet.roles='engineer'
		uci add_list web.ajaxinternet.roles='guest'
		uci add_list web.ruleset_main.rules='ajaxinternet'
	fi
	if [ ! $(uci get -q web.diagnosticsxdslgraphicsmodal) ]; then
		uci set web.diagnosticsxdslgraphicsmodal=rule
		uci set web.diagnosticsxdslgraphicsmodal.target='/modals/diagnostics-xdsl-graphics-modal.lp'
		uci add_list web.diagnosticsxdslgraphicsmodal.roles='admin' 
		uci add_list web.diagnosticsxdslgraphicsmodal.roles='engineer'
		uci add_list web.diagnosticsxdslgraphicsmodal.roles='guest'
		uci add_list web.ruleset_main.rules='diagnosticsxdslgraphicsmodal'
	fi
	if [ ! $(uci get -q web.mwanmodal) ]; then
		uci set web.mwanmodal=rule
		uci set web.mwanmodal.target='/modals/mwan-modal.lp'
		uci add_list web.mwanmodal.roles='admin' 
		uci add_list web.mwanmodal.roles='engineer'
		uci add_list web.ruleset_main.rules='mwanmodal'
	fi
	if [ ! $(uci get -q web.fastcacheoptionmodal) ]; then
		uci set web.fastcacheoptionmodal=rule
		uci set web.fastcacheoptionmodal.target='/modals/fast-cache-option-modal.lp'
		uci add_list web.fastcacheoptionmodal.roles='admin' 
		uci add_list web.fastcacheoptionmodal.roles='engineer'
		uci add_list web.ruleset_main.rules='fastcacheoptionmodal'
	fi
	if [ ! $(uci get -q web.dosprotectmodal) ]; then
		uci set web.dosprotectmodal=rule
		uci set web.dosprotectmodal.target='/modals/dosprotect-modal.lp'
		uci add_list web.dosprotectmodal.roles='admin' 
		uci add_list web.dosprotectmodal.roles='engineer'
		uci add_list web.ruleset_main.rules='dosprotectmodal'
	fi
	if [ ! $(uci get -q web.mmpbxdectmodal) ]; then
		uci set web.mmpbxdectmodal=rule
		uci set web.mmpbxdectmodal.target='/modals/mmpbx-dect-modal.lp'
		uci add_list web.mmpbxdectmodal.roles='admin' 
		uci add_list web.mmpbxdectmodal.roles='engineer'
		uci add_list web.ruleset_main.rules='mmpbxdectmodal'
	fi
	if [ ! $(uci get -q web.nfcmodal) ]; then
		uci set web.nfcmodal=rule
		uci set web.nfcmodal.target='/modals/nfc-modal.lp'
		uci add_list web.nfcmodal.roles='admin' 
		uci add_list web.nfcmodal.roles='engineer'
		uci add_list web.ruleset_main.rules='nfcmodal'
	fi
	if [ ! $(uci get -q web.stats) ]; then
		uci set web.stats=rule
		uci set web.stats.target='/stats.lp'
		uci add_list web.stats.roles='admin' 
		uci add_list web.stats.roles='engineer'
		uci add_list web.ruleset_main.rules='stats'
	fi
	if [ ! $(uci get -q web.cards) ]; then
		uci set web.cards=rule
		uci set web.cards.target='/cards.lp'
		uci add_list web.cards.roles='admin' 
		uci add_list web.cards.roles='engineer'
		uci add_list web.ruleset_main.rules='cards'
	fi
	if [ ! $(uci get -q web.ajaxinfotrafficcard) ]; then
		uci set web.ajaxinfotrafficcard=rule
		uci set web.ajaxinfotrafficcard.target='/ajax/traffic_graph.lua'
		uci add_list web.ajaxinfotrafficcard.roles='admin' 
		uci add_list web.ajaxinfotrafficcard.roles='engineer'
		uci add_list web.ruleset_main.rules='ajaxinfotrafficcard'
	fi
}

check_relay_dhcp() {
	if [ ! $(uci get -q dhcp.relay) ]; then
		uci set dhcp.relay=relay
	fi
}

suppress_excessive_logging() {
	if [ $(uci get -q igmpproxy.globals.trace) == "1" ]; then
		uci set igmpproxy.globals.trace='0'
	fi
	/etc/init.d/mobiled restart #Restart this to actually disable it... (broken and shitt init.d)
	uci set wansensing.global.tracelevel='3' #we don't need that we are still connected to vdsl -.-
	if [ ! $(uci get -q transformer.@main[0].log_level) ]; then #shutup no description warn
		uci set transformer.@main[0].log_level='2'
	fi
	if [ ! $(uci get -q system.@system[0].cronloglevel) ] || [ $(uci get -q system.@system[0].cronloglevel) == '0' ]; then #resolve spamlog of trafficdata
		uci set system.@system[0].cronloglevel="5"
		/etc/init.d/cron restart
	fi
	if [ ! $(uci get -q ledfw.syslog) ]; then #suppress loggin of ledfw... we don't need it...
		uci set ledfw.syslog=syslog
		uci set ledfw.syslog.trace='0'
	fi
}

check_aria_dir() {
	if [ -d /etc/config/aria2 ]; then #Fix generation of config
		mv /etc/config/aria2 /etc/aria2
	fi
	if [ "$(pgrep aria2)" ]; then
		killall aria2c
		aria2c --enable-rpc --rpc-listen-all=true --rpc-allow-origin-all --daemon=true --conf-path=/etc/aria2/aria2.conf
	fi
}

led_integration() {
	if [ ! $(uci get -q ledfw.status_led.enable) ] ; then
		uci set ledfw.status_led=status_led
		uci set ledfw.status_led.enable='0'
		uci set ledfw.timeout.ms='0'
	else
		if [ $(uci get -q ledfw.status_led.enable) == "0" ] && [ $(uci get -q ledfw.timeout.ms) != "0" ] ; then
			uci set ledfw.timeout.ms='0'
			/etc/init.d/ledfw restart
		fi
	fi
}

check_wansensing() {
	if [ -d /usr/lib/lua/wansensing ] && [ ! -d /usr/lib/lua/wansensingfw ] ; then
		rm /usr/lib/lua/wansensing/scripthelpers.lua
		mv /usr/lib/lua/wansensingfw/scripthelpers.lua /usr/lib/lua/wansensing/scripthelpers.lua
		rm -r /usr/lib/lua/wansensing
	fi
}

remove_downgrade_bit() {
	if [ $(uci get -q env.rip.board_mnemonic) == "VBNT-S" ] && [ $(uci get -q env.var.prod_number) == "4132" ] && [ -f /proc/rip/0123 ]; then
		logger_command "Downgrade limitation bit detected... Removing..."
		rmmod keymanager
		rmmod ripdrv
		mv /lib/modules/3.4.11/ripdrv.ko /lib/modules/3.4.11/ripdrv.ko_back
		mv /root/ripdrv.ko /lib/modules/3.4.11/ripdrv.ko
		insmod ripdrv
		echo 0123 > /proc/rip/delete
		echo 0122 > /proc/rip/delete
		rmmod ripdrv
		logger_command "Restoring original driver"
		rm /lib/modules/3.4.11/ripdrv.ko
		mv /lib/modules/3.4.11/ripdrv.ko_back /lib/modules/3.4.11/ripdrv.ko
		insmod ripdrv
		insmod keymanager
	elif [ -f /root/ripdrv.ko ]; then
		rm /root/ripdrv.ko
	fi
}

apply_right_opkg_repo() {
	if [ -f /etc/opkg.conf_17.3 ]; then
		local marketing_version=$(uci get -q version.@version[0].marketing_version)
		if [ $marketing_version ]; then
			if [ $marketing_version == "17.3" ]; then
				if [ -f /etc/okpg.conf ]; then
					rm /etc/okpg.conf
				fi
				mv /etc/opkg.conf_17.3 /etc/opkg.conf
				rm /etc/opkg.conf_16.3
			else
				if [ -f /etc/okpg.conf ]; then
					rm /etc/okpg.conf
				fi
				mv /etc/opkg.conf_16.3 /etc/opkg.conf
				rm /etc/opkg.conf_17.3
			fi
		fi
	fi
}

real_ver_entitied() {
	if [ -f /rom/etc/uci-defaults/tch_5000_versioncusto ] && [ -f /etc/config/versioncusto ]; then
		local short_ver=$(cat /proc/banktable/activeversion | grep -Eo ".*\..*\.[0-9]*-[0-9]*" )
		local real_ver=$(cat /rom/etc/uci-defaults/tch_5000_versioncusto  | grep "$short_ver" | awk '{print $2}')
		if [ "$real_ver" == "" ]; then
			real_ver="Not Found"
		fi
		if [ ! "$(uci get -q versioncusto.override.fwversion_override_real)" ]; then
			uci set versioncusto.override.fwversion_override_real="$real_ver"
		elif [ "$(uci get -q versioncusto.override.fwversion_override_real)" != "$real_ver" ]; then
			uci set versioncusto.override.fwversion_override_real="$real_ver"
		fi
		#Set version to latest stable...
		uci set versioncusto.override.fwversion_override="1.1.1" 
	fi
}

new_wol_implementation() {
	if [ -f /lib/functions/firewall-wol.sh ]; then
		rm /lib/functions/firewall-wol.sh
		uci set wol.config.dest_port=9
		/etc/init.d/wol restart
	fi
}

add_xdsl_option() {
	if [ ! $(uci get -q xdsl.dsl0.sra) ]; then
		uci set xdsl.dsl0.sra=1
	fi
	if [ ! $(uci get -q xdsl.dsl0.bitswap) ]; then
		uci set xdsl.dsl0.bitswap=1
	fi
	if [ ! $(uci get -q xdsl.dsl0.snr) ]; then
		uci set xdsl.dsl0.snr=0
	fi
	# Trying to understanding why this option were not applied i found that this option was the culprit
	# So this hex code means something... i found that the first bit is related to sra (>5 activate sra)
	# The third is related to bitswap (>2) enables it
	# demod_cap2_value (default 0x390000)
	# setting them to 0x000000 disable  sesdrop (second bit <6) CoMinMgn (first bit >1) 24k (first bit 1) 
	uci set xdsl.dsl0.demod_cap_mask="0x00047a"
	uci set xdsl.dsl0.demod_cap_value="0x00047a"
}

create_simbolic_utility() {
	if [ ! -h /usr/sbin/upgradegui ]; then
		upgrade_utility=/usr/share/transformer/scripts/upgradegui
		check_ver=/usr/share/transformer/scripts/checkver
		if [ -f $upgrade_utility ]; then
			ln -s $upgrade_utility /usr/sbin/upgradegui
			ln -s $check_ver /usr/sbin/checkver
		fi
	fi
}

update_checkver_upgrade_script() {
	if [ -f /usr/share/transformer/scripts/upgradegui.sh ]; then
		rm /usr/sbin/upgradegui
		rm /usr/sbin/checkver
		create_simbolic_utility
		rm /usr/share/transformer/scripts/upgradegui.sh
		rm /usr/share/transformer/scripts/checkver.sh
	fi
}

apply_specific_DGA_package() {
	logger_command "DGA device detected!"
	logger_command "Extracting custom-ripdrv-specificDGA.tar.bz2 ..."
	if [ -f /root/custom-ripdrv-specificDGA.tar.bz2 ]; then
		bzcat /root/custom-ripdrv-specificDGA.tar.bz2 | tar -C / -xf -
	fi
	logger_command "Extracting telnet_support-specificDGA.tar.bz2 ..."
	if [ -f /root/telnet_support-specificDGA.tar.bz2 ]; then
		bzcat /root/telnet_support-specificDGA.tar.bz2 | tar -C / -xf -
	fi
	logger_command "Extracting upgrade-pack-specificDGA.tar.bz2 ..."
	if [ -f /root/upgrade-pack-specificDGA.tar.bz2 ]; then
		bzcat /root/upgrade-pack-specificDGA.tar.bz2 | tar -C / -xf -
	fi
	logger_command "Extracting upnpfix-specificDGA.tar.bz2 ..."
	if [ -f /root/upnpfix-specificDGA.tar.bz2 ]; then
		bzcat /root/upnpfix-specificDGA.tar.bz2 | tar -C / -xf -
	fi
	logger_command "Extracting dlnad_supprto-specificDGA.tar.bz2 ..."
	if [ -f /root/dlnad_supprto-specificDGA.tar.bz2 ]; then
		if [ ! -f /usr/bin/dlnad ]; then
			bzcat /root/dlnad_supprto-specificDGA.tar.bz2 | tar -C / -xf -
		fi
	fi
	logger_command "Extracting wgetfix-specificDGA.tar.bz2 ..."
	if [ -f /root/wgetfix-specificDGA.tar.bz2 ]; then
		if [ ! "$(opkg info wget | grep Version | grep 1.17.1)" ]; then
			bzcat /root/wgetfix-specificDGA.tar.bz2 | tar -C /tmp -xf -
			opkg install /tmp/wget_1.17.1-1_brcm63xx-tch.ipk
			rm /tmp/wget_1.17.1-1_brcm63xx-tch.ipk
		fi
	fi
}

clean_specific_file() {
	rm /root/upnpfix-specificDGA.tar.bz2
	rm /root/upgrade-pack-specificDGA.tar.bz2
	rm /root/telnet_support-specificDGA.tar.bz2
	rm /root/custom-ripdrv-specificDGA.tar.bz2
	rm /root/dlnad_supprto-specificDGA.tar.bz2
	rm /root/wgetfix-specificDGA.tar.bz2
}

fcctlsettings_daemon() {
	if [ -f /etc/config/fcctlsettings ]; then
		if [ "$(cat /etc/config/fcctlsettings | grep 'mcast-learn')" ]; then
			rm /etc/config/fcctlsettings #NEVER EVER WRITE - IN CONFIG FILE... 
		fi
	fi
	if [ ! -f /etc/config/fcctlsettings ]; then
		if [ -f /etc/config/fcctlsettings_new ]; then
			mv /etc/config/fcctlsettings_new /etc/config/fcctlsettings
		fi
	else
		if [ -f /etc/config/fcctlsettings_new ]; then
			rm /etc/config/fcctlsettings_new
		fi
	fi
	if [ ! -k /etc/rc.d/S99fcctlsettings ] && [ -f /etc/init.d/fcctlsettings ]; then
		chmod 755 /etc/init.d/fcctlsettings
		/etc/init.d/fcctlsettings enable
		/etc/init.d/fcctlsettings start > /dev/null
	fi
}

sfp_rework() {
	if [ "$(uci get -q network.sfp)" ]; then
		logger_command "Moving sfp to sfptag..."
		uci rename network.sfp=sfptag
		class_target=10
		if [ $(uci get network.lan.ipaddr) == "192.168.$class_target.1" ]; then
			class_target=$class_target+10
		fi
		uci set network.sfptag.ipaddr=192.168.$class_target.1
		touch /root/.sfp_change
	fi
}

unlock_ssh_wan_tiscali() {
	if [ "$(uci get -q firewall.wan_SSH_rule1)" ]; then
		uci del firewall.wan_SSH_rule1
	fi
	if [ "$(uci get -q firewall.wan_SSH_rule5)" ]; then
		uci del firewall.wan_SSH_rule5
	fi
}

telstra_support_check() {
	################# telstra gui support ###################
	# We add rule anyway as if not present nginx gves 404 ###
	
	if [ ! $(uci get -q web.telstra_broadband.target) ]; then
		uci set web.telstra_broadband=rule
		uci set web.telstra_broadband.target='/telstra-modals/broadband.lp'
		uci add_list web.telstra_broadband.roles='admin' 
		uci add_list web.telstra_broadband.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_broadband'
	fi
	if [ ! $(uci get -q web.telstra_contentsharing_refresh) ]; then
		uci set web.telstra_contentsharing_refresh=rule
		uci set web.telstra_contentsharing_refresh.target='/telstra-modals/contentsharing.lp'
		uci add_list web.telstra_contentsharing_refresh.roles='admin' 
		uci add_list web.telstra_contentsharing_refresh.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_contentsharing_refresh'
	fi
	if [ ! $(uci get -q web.telstra_device) ]; then
		uci set web.telstra_device=rule
		uci set web.telstra_device.target='/telstra-modals/device.lp'
		uci add_list web.telstra_device.roles='admin' 
		uci add_list web.telstra_device.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_device'
	fi
	if [ ! $(uci get -q web.telstra_dyndns) ]; then
		uci set web.telstra_dyndns=rule
		uci set web.telstra_dyndns.target='/telstra-modals/dyndns.lp'
		uci add_list web.telstra_dyndns.roles='admin' 
		uci add_list web.telstra_dyndns.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_dyndns'
	fi
	if [ ! $(uci get -q web.telstra_home) ]; then
		uci set web.telstra_home=rule
		uci set web.telstra_home.target='/telstra-gui.lp'
		uci add_list web.telstra_home.roles='admin' 
		uci add_list web.telstra_home.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_home'
	fi
	if [ ! $(uci get -q web.telstra_parental) ]; then
		uci set web.telstra_parental=rule
		uci set web.telstra_parental.target='/telstra-modals/parental-modal.lp'
		uci add_list web.telstra_parental.roles='admin' 
		uci add_list web.telstra_parental.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_parental'
	fi
	if [ ! $(uci get -q web.telstra_portforwarding) ]; then
		uci set web.telstra_portforwarding=rule
		uci set web.telstra_portforwarding.target='/telstra-modals/portforwarding.lp'
		uci add_list web.telstra_portforwarding.roles='admin' 
		uci add_list web.telstra_portforwarding.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_portforwarding'
	fi
	if [ ! $(uci get -q web.telstra_remoteaccess) ]; then
		uci set web.telstra_remoteaccess=rule
		uci set web.telstra_remoteaccess.target='/telstra-modals/remoteaccess.lp'
		uci add_list web.telstra_remoteaccess.roles='admin' 
		uci add_list web.telstra_remoteaccess.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_remoteaccess'
	fi
	if [ ! $(uci get -q web.telstra_tod) ]; then
		uci set web.telstra_tod=rule
		uci set web.telstra_tod.target='/telstra-modals/tod.lp'
		uci add_list web.telstra_tod.roles='admin' 
		uci add_list web.telstra_tod.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_tod'
	fi
	if [ ! $(uci get -q web.telstra_traffic) ]; then
		uci set web.telstra_traffic=rule
		uci set web.telstra_traffic.target='/telstra-modals/traffic.lp'
		uci add_list web.telstra_traffic.roles='admin' 
		uci add_list web.telstra_traffic.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_traffic'
	fi
	if [ ! $(uci get -q web.telstra_user) ]; then
		uci set web.telstra_user=rule
		uci set web.telstra_user.target='/telstra-modals/user.lp'
		uci add_list web.telstra_user.roles='admin' 
		uci add_list web.telstra_user.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_user'
	fi
	if [ ! $(uci get -q web.telstra_wifi) ]; then
		uci set web.telstra_wifi=rule
		uci set web.telstra_wifi.target='/telstra-modals/wifi.lp'
		uci add_list web.telstra_wifi.roles='admin' 
		uci add_list web.telstra_wifi.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_wifi'
	fi
	if [ ! $(uci get -q web.telstra_wifiguest) ]; then
		uci set web.telstra_wifiguest=rule
		uci set web.telstra_wifiguest.target='/telstra-modals/wifiguest.lp'
		uci add_list web.telstra_wifiguest.roles='admin' 
		uci add_list web.telstra_wifiguest.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_wifiguest'
	fi
	if [ ! $(uci get -q web.telstra_helpbroadband) ]; then
		uci set web.telstra_helpbroadband=rule
		uci set web.telstra_helpbroadband.target='/telstra-helpfiles/help_broadband.lp'
		uci add_list web.telstra_helpbroadband.roles='admin' 
		uci add_list web.telstra_helpbroadband.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helpbroadband'
	fi
	if [ ! $(uci get -q web.telstra_helpcontentsharing) ]; then
		uci set web.telstra_helpcontentsharing=rule
		uci set web.telstra_helpcontentsharing.target='/telstra-helpfiles/help_contentsharing.lp'
		uci add_list web.telstra_helpcontentsharing.roles='admin' 
		uci add_list web.telstra_helpcontentsharing.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helpcontentsharing'
	fi
	if [ ! $(uci get -q web.telstra_helpdyndns) ]; then
		uci set web.telstra_helpdyndns=rule
		uci set web.telstra_helpdyndns.target='/telstra-helpfiles/help_dyndns.lp'
		uci add_list web.telstra_helpdyndns.roles='admin' 
		uci add_list web.telstra_helpdyndns.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helpdyndns'
	fi
	if [ ! $(uci get -q web.telstra_helphome) ]; then
		uci set web.telstra_helphome=rule
		uci set web.telstra_helphome.target='/telstra-helpfiles/help_home.lp'
		uci add_list web.telstra_helphome.roles='admin' 
		uci add_list web.telstra_helphome.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helphome'
	fi
	if [ ! $(uci get -q web.telstra_helpportforwarding) ]; then
		uci set web.telstra_helpportforwarding=rule
		uci set web.telstra_helpportforwarding.target='/telstra-helpfiles/help_portforwarding.lp'
		uci add_list web.telstra_helpportforwarding.roles='admin' 
		uci add_list web.telstra_helpportforwarding.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helpportforwarding'
	fi
	if [ ! $(uci get -q web.telstra_helpremoteaccess) ]; then
		uci set web.telstra_helpremoteaccess=rule
		uci set web.telstra_helpremoteaccess.target='/telstra-helpfiles/help_remoteaccess.lp'
		uci add_list web.telstra_helpremoteaccess.roles='admin' 
		uci add_list web.telstra_helpremoteaccess.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helpremoteaccess'
	fi
	if [ ! $(uci get -q web.telstra_helpservices) ]; then
		uci set web.telstra_helpservices=rule
		uci set web.telstra_helpservices.target='/telstra-helpfiles/help_services.lp'
		uci add_list web.telstra_helpservices.roles='admin' 
		uci add_list web.telstra_helpservices.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helpservices'
	fi
	if [ ! $(uci get -q web.telstra_helptod) ]; then
		uci set web.telstra_helptod=rule
		uci set web.telstra_helptod.target='/telstra-helpfiles/help_tod.lp'
		uci add_list web.telstra_helptod.roles='admin' 
		uci add_list web.telstra_helptod.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helptod'
	fi
	if [ ! $(uci get -q web.telstra_helptraffic) ]; then
		uci set web.telstra_helptraffic=rule
		uci set web.telstra_helptraffic.target='/telstra-helpfiles/help_traffic.lp'
		uci add_list web.telstra_helptraffic.roles='admin' 
		uci add_list web.telstra_helptraffic.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helptraffic'
	fi
	if [ ! $(uci get -q web.telstra_helpusersetting) ]; then
		uci set web.telstra_helpusersetting=rule
		uci set web.telstra_helpusersetting.target='/telstra-helpfiles/help_usersetting.lp'
		uci add_list web.telstra_helpusersetting.roles='admin' 
		uci add_list web.telstra_helpusersetting.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helpusersetting'
	fi
	if [ ! $(uci get -q web.telstra_helpwifi) ]; then
		uci set web.telstra_helpwifi=rule
		uci set web.telstra_helpwifi.target='/telstra-helpfiles/help_wifi.lp'
		uci add_list web.telstra_helpwifi.roles='admin' 
		uci add_list web.telstra_helpwifi.roles='engineer'
		uci add_list web.ruleset_main.rules='telstra_helpwifi'
	fi

	############# end telstra gui support ################################
	if [ ! $( uci get -q env.var.telstra_webui) ]; then
		uci set env.var.telstra_webui="0"
	fi
	if [ -f /root/telstra_gui.tar.bz2 ]; then
		if [ "$(uci get -q env.var.telstra_webui)" == "1" ]; then
			bzcat /root/telstra_gui.tar.bz2 | tar -C / -xf - 
		fi
		rm /root/telstra_gui.tar.bz2
	fi
}

rootchecks() {
	logger_command "Save root password if modified"
	if [ ! $(awk -F: '/root/ {print $7 }' /etc/passwd) = "/bin/ash" ]; then #this enable root access from login
		sed -i '1croot:x:0:0:root:/root:/bin/ash' /etc/passwd
	fi
	if ! [ $encrypted_pass == $default_encrypted_pass ] && [ -z $saved_encrypted_pass ]; then #all of this is to check the root 
		echo -e "root\nroot" | passwd > /dev/null
		if ! [ $encrypted_pass == $default_encrypted_pass ]; then
			sed -i -e 's|"${encrypted_pass}"|"${default_encrypted_pass}"|' /etc/shadow
		fi
		echo "  Setting root password" > /dev/console
		save_root_encrypt_pass #this save the password to the env config file
	else
		if [ $encrypted_pass == $default_encrypted_pass ]; then
			echo "  Root password detected" > /dev/console
		else
			if [ $encrypted_pass == $saved_encrypted_pass ]; then
				echo "  Changed root password detected!" > /dev/console
			else
				echo "  New password detected!" > /dev/console
				save_root_encrypt_pass
			fi
		fi
	fi
	
	logger_command "Setting dropbear settings"
	uci set dropbear.@dropbear[0].Interface='lan'
	uci set dropbear.@dropbear[0].RootLogin='1'
	uci set dropbear.@dropbear[0].RootPasswordAuth='on' #dropbear root related
	uci set dropbear.@dropbear[0].PasswordAuth='on'
	uci set dropbear.@dropbear[0].enable='1'
	
	uci commit dropbear
	
	logger_command "Restarting dropbear"
	/etc/init.d/dropbear restart > /dev/null
}

root() {
	
	logger -s -t 'Root Script' "Rooting in progress..."
	
	#THIS CHECK DEVICE TYPE AND INSTALL SPECIFIC FILE
	device_type="$(uci get -q env.var.prod_friendly_name)"
		
	if [ "$device_type" == "DGA4132" ] || [ "$device_type" == "DGA4130" ]; then 
		device_type_model="$device_type"
		device_type="DGA"
	fi

	[ "$device_type" == "DGA" ] && logger_command "Apply specific device file..."
	[ "$device_type" == "DGA" ] && apply_specific_DGA_package
	
	if [ -f /root/custom-ripdrv-specificDGA.tar.bz2 ]; then
		clean_specific_file
		logger_command "Removing specific file and resuming root process..."
	fi
	
	/etc/init.d/watchdog-tch stop
	logger_command "Disable watchdog"
	
	logger_command "Start rooting"
	if [ ! -f /root/.check_process ]; then #this check if the placeholder exist
		touch /root/.check_process #this is a placeholder to know if the process ends correctly
	fi
	
	if [ -f /root/.reapply_due_to_upgrade ]; then
		if [ -f /root/GUI.tar.bz2 ]; then
			logger_command "Resetting /www dir due to firmware upgrade..."
			rm -r /www
			bzcat /root/GUI.tar.bz2 | tar -C / -xf - www
			rm /root/.reapply_due_to_upgrade
		fi
	fi
	
	logger_command "Stopping nginx and transformer"
	while [ "$(pgrep "nginx")" ]; do
		if [ "$(pgrep "nginx")" ]; then
			/etc/init.d/nginx stop > /dev/null
		fi
	done
		
	logger_command "Checking if we are on TIM configuration"
	if [ $(uci -q get env.var.isp) ]; then
		if [ $(uci get -q env.var.isp) == "TIM" ]; then #this add specific config for TIM
			add_ipv6
			add_ppp_mgmt
			add_telecom_stock_dns
		else
			purify_from_tim
		fi
	fi
	
	logger_command "Unlocking web interface if needed"
	if [ -f /etc/config/web_unlock ]; then
		if [ ! $(uci get -q web.changelog) ] || [ ! $(uci get -q web.mmpbxstatisticsmodal) ] ; then
			mv /etc/config/web /etc/config/web_back #backup of the stock web config
			mv /etc/config/web_unlock /etc/config/web #apply unlocked universal config
		else
			rm /etc/config/web_unlock
		fi
	fi
	
	logger_command "Check and cleanup"
	add_ipoe #this need to stay to make the wizard work correctly
	logger_command "Remove default dns"
	remove_default_dns #tim sets his dns on to of the loopback interface
	setup_network #Fix some missing network value
	logger_command "Purify wan"
	puryfy_wan_interface #remove gracefull restart, could give problem
	logger_command "Fix dns bug"
	fix_dns_dhcp_bug #disable odhcpd as ipv6 is currently broken 
	[ "$device_type" == "DGA" ] && logger_command "Enable dlnad"
	[ "$device_type" == "DGA" ] && check_new_dlnad #this enable a new dlna deamon introduced with 17.1, the old one is keep
	logger_command "Fix Sysupgrade"
	check_upgrade_shit #this if old script are present to fix sysupgrade
	logger_command "Check orig config"
	orig_config_gen #this check if new config are already present
	logger_command "Trafficmon inizialization"
	trafficmon_support #support trafficmon
	logger_command "Restore original mapper"
	restore_original_mapper #this restore the original file autogenerated as they are specific to the build version.
	[ "$device_type" == "DGA" ] && logger_command "Transformer lib check"
	[ "$device_type" == "DGA" ] && transformer_lib_check #another cleanup
	logger_command "Remove https check"
	remove_https_check_cwmpd #cleanup
	logger_command "Check css presence"
	check_uci_gui_skin #check css
	logger_command "Check if dnsmasq is names as we need it for the webui"
	check_dnsmasq_name #check dnsmasq name in uci
	uci set dhcp.dnsmasq=dnsmasq
	logger_command "Check driver setting"
	create_driver_setting #create diver setting if not present
	logger_command "Check Dropbear config file"
	dropbear_file_check  #check dropbear config
	logger_command "Check ddns directory"
	check_noip_file #check ddns directory in /etc
	logger_command "Check eco param"
	eco_param #This disable eco param as they introduce some latency
	[ "$device_type" == "DGA" ] && logger_command "Enable new upnp"
	[ "$device_type" == "DGA" ] && enable_new_upnp #New upnp fix
	logger_command "Sync dhcp configuration for new webui"
	update_dhcp_config #Dhcp sync
	logger_command "Create gui type in config"
	create_gui_type #Gui Type
	logger_command "Add new web option"
	add_new_web_rule #This check new option so that we don't replace the one present
	logger_command "New DHCPRelay Option"
	check_relay_dhcp #Sync option
	logger_command "Disable trace from igmpproxy"
	suppress_excessive_logging #Suppress logging
	logger_command "Moving aria2 dir"
	check_aria_dir #Fix config function
	logger_command "Creating new option for led definition"
	led_integration #New option led
	[ "$device_type" == "DGA" ] && logger_command "Old build detected, moving wansensing file"
	[ "$device_type" == "DGA" ] && check_wansensing # Move wansensing file to old directory
	[ "$device_type" == "DGA" ] && logger_command "Checking downgrade limitation bit"
	[ "$device_type" == "DGA" ] && remove_downgrade_bit #Use custom driver to remove this... thx @Roleo
	[ "$device_type" == "DGA" ] && logger_command "Checking opkg conf"
	[ "$device_type" == "DGA" ] && apply_right_opkg_repo #Check opkg conf based on version
	logger_command "Creating and checking real version"
	real_ver_entitied #Support for spoofing firm
	logger_command "Creating new wol implementation"
	new_wol_implementation #New Wol
	logger_command "Sync new xdsl option"
	add_xdsl_option #New xdsl option
	logger_command "Creating utility simbolic link"
	create_simbolic_utility #This create simbolic link
	logger_command "Clean old script"
	update_checkver_upgrade_script #This clean old script
	logger_command "Adding fast cache options"
	fcctlsettings_daemon #Adds fast cache options
	[ "$device_type_model" == "DGA4132" ] && logger_command "Reworking sfp interface in network..."
	[ "$device_type_model" == "DGA4132" ] && sfp_rework #sfp to sfptag, to solve local ip problem
	[ "$device_type" == "MediaAccess TG789vac v2" ] && logger_command "Unlocking ssh for tiscali firmware"
	[ "$device_type" == "MediaAccess TG789vac v2" ] && unlock_ssh_wan_tiscali
	logger_command "Reinstalling telstra gui if needed..."
	telstra_support_check #telstra support check
	
	logger_command "Setting root flag"
	uci set system.config.rooted='1' #this crate a flag in the config to know if it's rooted or not

	logger_command "Disable reboot after crash, this gives race condition..."
	uci set system.@coredump[0].reboot='0'
	
	rootchecks #This check root availability
	
	
	if [ ! $(uci get -q env.var.bank_check) ]; then #this set bank_check bit if not present
		uci set env.var.bank_check="1"
	fi
	
	[ "$device_type" == "DGA" ] && uci set wireless.global.wifi_analyzer_disable='0' #AGTEF specific
	
	logger_command "Doing various check and generating hash..."
	cumulative_check_gui #Handle strange installation
	
	logger_command "Sync version"
	if [ -f /usr/share/transformer/scripts/checkver ]; then
		checkver_cron
	fi
	
	if [ -f /root/.sfp_change ]; then
		rm /root/.sfp_change
		/etc/init.d/network restart
		ifup wan
	fi
	
	logger_command "Apply modification"
	uci commit
	
	logger_command "Restart power init"
	/etc/init.d/power restart
	
	logger_command "Restarting dnsmasq"
	killall dnsmasq
	/etc/init.d/dnsmasq restart
	
	rm /root/.check_process #we remove the placeholder as the process is complete
	logger_command "Process done."
	echo "  Process done. Your modem is now rooted!" > /dev/console
	
	logger_command "Checking if ISP is detected..."
	if [ $(uci -q get env.var.isp) ]; then
		if [ $(uci -q get env.var.isp) == "Other" ]; then #this disable cwmpd if it's not tim...
			uci set cwmpd.cwmpd_config.state='0'
			if [ $(uci get -q cwmpd.cwmpd_config.state) = "1" ]; then
				if [ -f /var/run/cwmpd.pid ]; then
					/etc/init.d/cwmpd stop
				fi
				/etc/init.d/cwmpd disable
			fi
		elif [ $(uci -q get env.var.isp) == "Tiscali" ]; then
			uci set cwmpd.cwmpd_config.acs_url="http://webdirect.tr69.tiscali.it:8080/ftacs-basic/ACS"
		elif [ $(uci -q get env.var.isp) == "TIM" ]; then
			logger_command "TIM ISP detected..."
			logger_command "Checking CWMP server..."
			new_platform=https://regman-mon.interbusiness.it:10800/acs/
			unified_platform=https://regman-tl.interbusiness.it:10700/acs/ 
			mgmt_platform=https://regman-tl.interbusiness.it:10500/acs/
			if [ "$(curl -s -k $new_platform)" ]; then
				uci set cwmpd.cwmpd_config.acs_url=$new_platform
			elif [ "$(curl -s -k $unified_platform)" ]; then
				uci set cwmpd.cwmpd_config.acs_url=$unified_platform
			elif [ "$(curl -s -k $mgmt_platform)" ]; then
				uci set cwmpd.cwmpd_config.acs_url=$mgmt_platform
			else
				uci set cwmpd.cwmpd_config.acs_url="None"
			fi
			logger_command "CWMP Server detected: "$(uci get cwmpd.cwmpd_config.acs_url)
			if [ $(uci get -q cwmpd.cwmpd_config.interface) != "wan" ]; then
				uci set cwmpd.cwmpd_config.interface='wan'
			fi
			uci commit cwmpd
			if [ $(uci get -q cwmpd.cwmpd_config.acs_url) == "None" ]; then
				if [ -f /var/run/cwmpd.pid ]; then
					/etc/init.d/cwmpd stop
				fi
			else
				/etc/init.d/cwmpd enable
				if [ ! -f /var/run/cwmpd.pid ]; then
					/etc/init.d/cwmpd start
				else
					/etc/init.d/cwmpd restart
				fi
			fi
		fi
	fi
	
	logger_command "Restarting transformer"
	/etc/init.d/transformer restart
	logger_command "Waiting transformer to start for 20 seconds"
	sleep 20
	logger_command "Restarting nginx"
	/etc/init.d/nginx start
	logger_command "Restarting transformer a second time cause it's just shit..."
	/etc/init.d/transformer restart
	
	/etc/init.d/watchdog-tch start
	
	logger_command "Resetting cwmp and watchdog"
}

###########################################################################################
#                        Init.d function                                                  #
###########################################################################################

local rooted
local force=0
local debug=0

force() {
	force=1
	boot
}

debug() {
	debug=1
	force=1
	boot
}

install() {
	rootchecks
}

boot() {
    logo_project
	check_root
	check_gui_ver
	check_isp_config
	create_symlink
	
	#THIS CHECK DEVICE TYPE AND INSTALL SPECIFIC FILE
	device_type="$(uci get -q env.var.prod_friendly_name)"
		
	if [ "$device_type" == "DGA4132" ] || [ "$device_type" == "DGA4130" ]; then 
		device_type="DGA"
	fi
	
	[ "$device_type" == "DGA" ] && wifi_fix_24g
	if [ $rooted -ne 1 ]; then
		echo "  Root not detected! Rooting..." > /dev/console
		root
	else
		if [ -f /root/.check_process ]; then
			echo "  Root detected but process not terminated well! Rerooting..." > /dev/console
			root
		else
			if [ $force -eq 1 ]; then
				echo "  Root detected but force flag detected! Rerooting..." > /dev/console
				root
			else
				echo "  Root detected! Doing nothing." > /dev/console
			fi
		fi
	fi
	check_bank
	echo " ----------------------------------------------------- " > /dev/console
}
