#!/bin/ash /etc/rc.common

#
#
#	 Custom Gui for Technicolor Modem: utility script and modified gui for the
#	 								   Technicolor Modem interface based on OpenWrt
#
#	Copyright (C) 2018  Christian Marangi <ansuelsmth@gmail.com>
#
#	This file is part of Custom Gui for Technicolor Modem.
#
#	Custom Gui for Technicolor Modem is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	Custom Gui for Technicolor Modem is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with Custom Gui for Technicolor Modem.  If not, see <http://www.gnu.org/licenses/>.
#
#

START=94
EXTRA_COMMANDS="force debug"
EXTRA_HELP="\
        force   Force tch-nginx-gui reinstall even when install_gui flag isn't there
        debug   force command with debug log enabled
"
#Gui version is now autocompleted base on latest dev, this variable will be replaced by the automatic script
version_gui=TO_AUTO_COMPLETE
#Latest version on TIM cwmp for version spoof
latest_version_on_TIM_cwmp="2.2.0"

logo_project() {
  cat <<EOF >/dev/console

 █████╗ ███╗   ██╗███████╗██╗   ██╗███████╗██╗     
██╔══██╗████╗  ██║██╔════╝██║   ██║██╔════╝██║     
███████║██╔██╗ ██║███████╗██║   ██║█████╗  ██║     
██╔══██║██║╚██╗██║╚════██║██║   ██║██╔══╝  ██║     
██║  ██║██║ ╚████║███████║╚██████╔╝███████╗███████╗
╚═╝  ╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚══════╝╚══════╝
(Modified Gui RootScript)                  (Christo)

EOF

  logger <<EOF
                                    _ 
    /\  (Modified Gui RootScript)  | |
   /  \    _ __   ___  _   _   ___ | |
  / /\ \  | '_ \ / __|| | | | / _ \| |
 / ____ \ | | | |\__ \| |_| ||  __/| |
/_/    \_\|_| |_||___/ \__,_| \___||_|
                            (Christo) 
EOF
}

####################LOG FUNCTION#################
logger_command() {
  if [ "$debug" -eq 1 ]; then
    logger -t "Root Script" "$1"
	echo "Root Script" "$1"
  fi
}
#################################################

disable_upload_coredump_and_reboot() {
  #disable upload of coredump dignostics...
  #This is a modified build so let's not full server with false coredump.
  if [ "$(uci get -q system.@coredump[0].action)" != "ignore" ]; then
    uci set system.@coredump[0].action="ignore"
  fi
  if [ "$(uci get -q system.@coredump[0].reboot)" != "0" ]; then
    logger_command "Disable reboot after crash, this gives race condition..."
    uci set system.@coredump[0].reboot='0'
  fi
  #Clean coredump
  if [ "$(find /root -type f -name "*.core.*")" ]; then
    for coredump in /root/*.core.*; do
      logger_command "Removing coredump $coredump from /root..."
      rm "$coredump"
    done
  fi
}

install_gui() {
  [[ -z "$log_progress" ]] && log_progress=0
  [[ -z "$restart_dnsmasq" ]] && restart_dnsmasq=0

  logger -s -t 'tch-nginx-gui installer' "Installing in progress..."

  if [ -d /etc/modgui_scripts ]; then
    for file in /etc/modgui_scripts/*; do
      logger_command "Executing $file" ConsoleOnly
      . $file
    done
  fi

  #Remove reapply file as the root process after upgrade has finished.
  if [ -f /root/.reapply_due_to_upgrade ]; then
    rm /root/.reapply_due_to_upgrade
  fi

  echo "  Process done. tch-ningx-gui is now installed!" >/dev/console
}

check_full_overlay() {
  overlay_percent=$(df /overlay | sed -n 2p | awk {'{print $5}'} | sed 's|%||')
  overlay_mtdblock=$(df /overlay | sed -n 2p | awk {'{print $1}'})
  bootedbank=$(cat /proc/banktable/booted)
  #Reset if rootfs more than 97% full
  if [ "$overlay_percent" -gt 96 ]; then
    logger_command "DETECTED FULL ROOTFS... TRYING TO RESTORE..."
    echo "  DETECTED FULL ROOTFS... TRYING TO RESTORE..." >/dev/console
    rm -rf /overlay/"$bootedbank"
    overlay_percent=$(df /overlay | sed -n 2p | awk {'{print $5}'} | sed 's|%||')
    #Verify if rm did actually free up space...
    if [ "$overlay_percent" -gt 96 ]; then
      logger_command "CLEANUP FAILED... ERASING OVERLAY PARTITION"
      echo "  CLEANUP FAILED... ERASING OVERLAY PARTITION" >/dev/console
      logger_command "THIS WILL RESTORE THE DEVICE TO FACTORY SETTINGS"
      echo "  THIS WILL RESTORE THE DEVICE TO FACTORY SETTINGS" >/dev/console
      mtd -r erase "$overlay_mtdblock"
      return 1
    fi
    reboot
    return 1
  fi
  return 0
}

###########################################################################################
#						Init.d function												  #
###########################################################################################

force() {
  force=1
  main
}

debug() {
  export debug=1
  force=1
  main
}

boot() {
  main
}

main() {
  ubus send fwupgrade '{"state":"upgrading"}'
  logo_project
  check_full_overlay || exit 1

  [ -z "$force" ] && force=0
  [ -z "$debug" ] && export debug=0

  echo "  Disabling reboot on crash..." >/dev/console
  disable_upload_coredump_and_reboot

  if [ -f /root/.install_gui ]; then
    echo "  detected reinstall GUI request! Installing..." >/dev/console
    install_gui
  elif [ $force -eq 1 ]; then
    echo "  force flag detected! Reinstalling..." >/dev/console
    install_gui
  else
    echo "  No force flag detected! Doing nothing." >/dev/console
  fi

  ubus send fwupgrade '{ "state": "done" }'
}
