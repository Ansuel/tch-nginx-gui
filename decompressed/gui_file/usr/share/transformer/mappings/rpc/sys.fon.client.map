local require = require
local register = register
local pairs, error = pairs, error

-- Open connection to UBUS
local conn = mapper("ubus").connect()

local sys_fon_ = {
    objectType = {
      name = "sys.fon.",
      access = "readOnly",
      minEntries = 1,
      maxEntries = 1,
      parameters = {},
    }
}

register(sys_fon_)

-- sys.fon.client.{i}
local Sys_Fon_Client_i_ = {
  objectType = {
    name = "sys.fon.client.{i}.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      status = {
        access = "readOnly",
        type = "string",
      },
      mac = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

local clients = {}
Sys_Fon_Client_i_.entries = function(mapping)
  local entries = {}
  clients = conn:call("hotspotd.clients", "list", {})
  if clients == nil then
    return entries
  end
  for k in pairs(clients) do
       entries[#entries+1] = k
  end
  return entries
end

Sys_Fon_Client_i_.get = {
  status = function(mapping, param, key)
    return clients[key].status
  end,
  mac = function(mapping, param, key)
    return key
  end,
}

register(Sys_Fon_Client_i_)
