local uci_helper = mapper("ucihelper")

local datausage_interface_ = {
	objectType = {
		name = 'rpc.datausage.interface.@.',
		access = 'readOnly',
		numEntriesParameter = "InterfaceNumberOfEntries",
		minEntries = 0,
		maxEntries = math.huge,
		parameters = {
			tx_bytes_per_second = {
				access = "readOnly",
				type = "string"
			},
			rx_bytes_per_second = {
				access = "readOnly",
				type = "string"
			},
			tx_bytes_average = {
				access = "readOnly",
				type = "string"
			},
			rx_bytes_average = {
				access = "readOnly",
				type = "string"
			},
			tx_bytes_total = {
				access = "readOnly",
				type = "string"
			},
			rx_bytes_total = {
				access = "readOnly",
				type = "string"
			},
			reset = {
				access = "readWrite",
				type = "boolean"
			},
			usage_limit_reached = {
				access = "readOnly",
				type = "boolean"
			}
		}
	}
}

local conn = mapper("ubus").connect()
if not conn then
	return
end

local helper = require("mobiled.scripthelpers")

local function getall(mapping, key)
	return helper.getUbusData(conn, "datausage", "get", { interface = key })
end

local function get(mapping, paramName, key)
	return getall(mapping, key)[paramName]
end

local function set(mapping, paramName, paramValue, key)
	if paramName == "reset" then
		return helper.getUbusData(conn, "datausage", "reset", { interface = key })
	end
end

local function datausageInterfaceEntries(mapping)
	local interfaces = {}
	local function cb(t)
		table.insert(interfaces, { t['.name'], t.ifname })
	end
	uci_helper.foreach_on_uci({
		config = "datausage",
		sectionname = "interface"
	}, cb)
	return interfaces
end

datausage_interface_.getall = getall
datausage_interface_.get = get
datausage_interface_.set = set
datausage_interface_.entries = datausageInterfaceEntries

register(datausage_interface_)
