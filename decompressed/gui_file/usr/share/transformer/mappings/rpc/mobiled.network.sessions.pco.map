local string, tonumber, type, pairs = string, tonumber, type, pairs

local obj = {
	objectType = {
		name = 'rpc.mobiled.device.@.network.sessions.@.pco.@.',
		access = 'readOnly',
		minEntries = 0,
		maxEntries = math.huge,
		parameters = {
			id = {
				access = "readOnly",
				type = "unsignedInt"
			},
			length = {
				access = "readOnly",
				type = "unsignedInt"
			},
			data = {
				access = "readOnly",
				type = "string"
			}
		}
	}
}

local conn = mapper("ubus").connect()
if not conn then
	return
end

local helper = require("mobiled.scripthelpers")

local function getPcoData(key, parentkey, grandparentkey)
	local result = {}
	setmetatable(result, { __index = function() return "" end })

	local session_id = tonumber(string.match(parentkey, 'device%d_session(%d)'))
	if session_id and session_id > 0 then
		session_id = session_id - 1
	end

	local data = helper.getUbusData(conn, "mobiled.network", "sessions", { dev_idx = tonumber(string.match(grandparentkey, '%d')), session_id = session_id })
	if type(data.pco) == "table" then
		for _, pco in pairs(data.pco) do
			if type(pco) == "table" then
				local id = tonumber(string.match(key, 'pco_(%d+)'))
				if id == tonumber(pco.id) then
					result.id = pco.id
					result.length = pco.length
					result.data = pco.data
					break
				end
			end
		end
	end
	return result
end

local function getall(mapping, key, parentkey, grandparentkey)
	return getPcoData(key, parentkey, grandparentkey)
end

local function get(mapping, paramName, key, parentkey, grandparentkey)
	return getall(mapping, key, parentkey, grandparentkey)[paramName]
end

local function pcoEntries(mapping, key, parentkey)
	local session_id = tonumber(string.match(key, 'device%d_session(%d)'))
	if session_id and session_id > 0 then
		session_id = session_id - 1
	end
	local data = helper.getUbusData(conn, "mobiled.network", "sessions", { dev_idx = tonumber(string.match(parentkey, '%d')), session_id = session_id })
	local pcos = {}
	if type(data.pco) == "table" then
		for i, pco in pairs(data.pco) do
			table.insert(pcos, {tostring(i), 'session_' .. session_id .. '_pco_' .. pco.id })
		end
	end
	return pcos
end

obj.getall = getall
obj.get = get
obj.entries = pcoEntries

register(obj)
