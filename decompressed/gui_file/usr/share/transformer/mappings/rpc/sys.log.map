local popen = require("modgui").popen
local string = string
local register = register
local uci_helper = mapper("ucihelper")

local sys_log_ = {
    objectType = {
        name = "sys.log.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            devicelog = {
                access = "readOnly",
                type = "string"
            },
            routingtable = {
                access = "readOnly",
                type = "string"
            },
            connections = {
                access = "readOnly",
                type = "string"
            },
        },
    }
}

local get = {
devicelog = function()
    --check if persistentlog enabled
    local persistenlog_enabled = false
    local log_binding = {config="system", sectionname="log"}
    uci_helper.foreach_on_uci(log_binding, function(s)
       if s.path and s.size and s.rotate then
          if s.size ~= "0" and s.rotate ~= "0" then
             persistenlog_enabled = true
          end
         return false
       end
    end)
    local logString, logFile
    local log = " "
    if persistenlog_enabled then
      local log_directory_path = "/root/log/"
      if lfs.attributes(log_directory_path, 'mode') == 'directory' then
        for log_message_file in lfs.dir(log_directory_path) do
          local mdevlog = string.match(log_message_file,"^message*")
          if mdevlog then
            local path = log_directory_path..log_message_file
            local file = io.open(path,"rb")
            if not file then
              return ""
            end
            logFile = file:read ("*a")
            log = log .. logFile
            file:close()
          end
          logString = log
        end
      else
        return ""
      end
    else
      log = popen("/sbin/logread")
      logString = log:read("*a")
    end

    if log == nil then
        return ""
    end

    if logString == nil then
        return ""
    end
    return string.sub(logString, -32768)
end,
routingtable = function()
    local log = popen("/sbin/route -n")
    if log == nil then
        return ""
    end
    local logString = log:read("*a")
    log:close()
    if logString == nil then
        return ""
    end
    return logString
end,

connections = function()
    local log = io.open("/proc/net/nf_conntrack")
    if log == nil then
        return ""
    end
    local logString = log:read("*a")
    log:close()
    if logString == nil then
        return ""
    end
    return string.sub(logString,-32768)
end
}

sys_log_.get = get
register(sys_log_)
