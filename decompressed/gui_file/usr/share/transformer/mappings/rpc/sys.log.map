local popen = io.popen
local string = string
local register = register
local uci_helper = mapper("ucihelper")

local sys_log_ = {
    objectType = {
        name = "sys.log.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            devicelog = {
                access = "readOnly",
                type = "string"
            },
            routingtable = {
                access = "readOnly",
                type = "string"
            },
            connections = {
                access = "readOnly",
                type = "string"
            },
        },
    }
}

local get = {
devicelog = function()
    --check if persistentlog enabled
    local persistenlog_enabled = false
    local log_binding = {config="system", sectionname="log"}
    uci_helper.foreach_on_uci(log_binding, function(s)
       if s.path and s.size and s.rotate then
         persistenlog_enabled = true
         return false
       end
    end)
    local log
    if persistenlog_enabled then
      log = popen('cat `ls -r /root/log/message*`')
    else
      log = popen("/sbin/logread")
    end

    if log == nil then
        return ""
    end
    local logString = log:read("*a")
    if logString == nil then
        return ""
    end
    return string.sub(logString, -32768)
end,
routingtable = function()
    local log = popen("/sbin/route -n")
    if log == nil then
        return ""
    end
    local logString = log:read("*a")
    log:close()
    if logString == nil then
        return ""
    end
    return logString
end,

connections = function()
    local log = popen("cat /proc/net/nf_conntrack")
    if log == nil then
        return ""
    end
    local logString = log:read("*a")
    log:close()
    if logString == nil then
        return ""
    end
    return string.sub(logString,-32768)
end
}

sys_log_.get = get
register(sys_log_)
