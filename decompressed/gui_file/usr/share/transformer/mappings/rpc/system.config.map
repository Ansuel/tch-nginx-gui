local logger = require("transformer.logger")
local log = logger.new("rpc.system.config.")
local cfg = require("transformer.shared.ConfigCommon")

local SYSTEM_CONFIG_ = {
  objectType = {
    name = 'rpc.system.config.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {}
  }
}

register(SYSTEM_CONFIG_)

-- Config EXPORT

local SYSTEM_CONFIG_EXPORT_ = {
  objectType = {
    name = 'rpc.system.config.export.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      state = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "None",
          "Requested",
          "Complete",
          "Error",
        },
      },
      filename = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      location = {
        access = "readOnly",
        type = "string",
      },
      info = {
        access = "readOnly",
        type = "string",
      },
      version = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

local export_mapdata = cfg.export_init()

SYSTEM_CONFIG_EXPORT_.get = {
  state = function(mapping, param)
    return export_mapdata.state or "None"
  end,
  filename = function(mapping, param)
    return export_mapdata.filename or ""
  end,
  location = export_mapdata.location or "/tmp/",
  info = function(mapping, param)
    return export_mapdata.info or ""
  end,
  version = export_mapdata.version or "1.00",
}

SYSTEM_CONFIG_EXPORT_.set = {
  state = function(mapping, param, value)
    if value ~= "Requested" then
      return nil, "invalid value"
    end
    if export_mapdata.state ~= "Requested" then
        cfg.export_reset(export_mapdata)
        export_mapdata.state = "Requested"
        -- start export routine
        cfg.export_start(export_mapdata)
    end
  end,
  filename = function(mapping, param, value)
    if string.find(value, "/") then
      return nil, "invalid value"
    end
    if export_mapdata.state == "Requested" then
      return nil, "invalid state"
    end
    -- remove old file
    if export_mapdata.state == "Complete" then
      os.remove(export_mapdata.location .. export_mapdata.filename)
    end
    cfg.export_reset(export_mapdata)
    export_mapdata.filename = value
  end,
}

register(SYSTEM_CONFIG_EXPORT_)

-- Config IMPORT

local SYSTEM_CONFIG_IMPORT_ = {
  objectType = {
    name = 'rpc.system.config.import.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      state = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "None",
          "Requested",
          "Complete",
          "Error",
        },
      },
      filename = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      location = {
        access = "readOnly",
        type = "string",
      },
      info = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

local import_mapdata = cfg.export_init()

SYSTEM_CONFIG_IMPORT_.get = {
  state = function(mapping, param)
    return import_mapdata.state or "None"
  end,
  filename = function(mapping, param)
    return import_mapdata.filename or ""
  end,
  location = import_mapdata.location or "/tmp/",
  info = function(mapping, param)
    return import_mapdata.info or ""
  end,
}

SYSTEM_CONFIG_IMPORT_.set = {
  state = function(mapping, param, value)
    if value ~= "Requested" then
      return nil, "invalid value"
    end
    if import_mapdata.state ~= "Requested" then
        cfg.import_reset(import_mapdata)
        import_mapdata.state = "Requested"
        -- start import routine
        cfg.import_start(import_mapdata)
    end
  end,
  filename = function(mapping, param, value)
    if string.find(value, "/") then
      return nil, "invalid value"
    end
    if import_mapdata.state == "Requested" then
      return nil, "invalid state"
    end
    cfg.import_reset(import_mapdata)
    import_mapdata.filename = value
  end,
}

register(SYSTEM_CONFIG_IMPORT_)

