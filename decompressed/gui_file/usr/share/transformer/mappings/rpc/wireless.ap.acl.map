local logger = require("transformer.logger")
local log = logger.new("wireless.ap.acl", 2)
local register = register;

local 
wireless_ap_acl_ = {
  objectType = {
    name = "rpc.wireless.ap.@.acl.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
        mode = {
            access = "readWrite",
            type = "string",
        },
        registration_time = {
            access = "readWrite",
            type = "string",
        },
        reg = {
            access = "readWrite",
            type = "boolean",
        },
        state = {
            access = "readOnly",
            type = "string",
        },
    },
  }
}

local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()

local function nilToEmptyString(st)
    if st == nil then
        return ""
    else
        return tostring(st)
    end
end

local function getDataForAP(ap)
    local result = conn:call("wireless.accesspoint.acl", "get", { name = ap })
    if result == nil then
        log:error("Cannot retrieve alc info for ap " .. ap)
        return {}
    end
    return result[ap]
end

local function getall(mapping, key)
    local apData = getDataForAP(key)
    local sanitizedData = {}
    for k,v in pairs(apData) do
        sanitizedData[k] = nilToEmptyString(v)
    end
    sanitizedData["reg"] = "0"
    return sanitizedData
end

local function get(mapping, paramName, key)
    local apData = getDataForAP(key)
    return nilToEmptyString(apData[paramName]);
end

local set = {
    mode = function(mapping, param, value, key)
        uci_helper.set_on_uci({
            config = "wireless", sectionname = key , option = "acl_mode"
        }, value, commitapply)
    end,
    registration_time = function(mapping, param, value, key)
        uci_helper.set_on_uci({
            config = "wireless", sectionname = key , option = "acl_registration_time"
        }, value, commitapply)
    end,
    reg = function(mapping, param, value, key)
        conn:call("wireless", "acl_button", { name = key })
    end,
}

wireless_ap_acl_.getall = getall
wireless_ap_acl_.get = get
wireless_ap_acl_.set = set
wireless_ap_acl_.commit = function()
    uci_helper.commit({config = "wireless"})
end
wireless_ap_acl_.revert = function()
    uci_helper.revert({config = "wireless"})
end

register(wireless_ap_acl_)
