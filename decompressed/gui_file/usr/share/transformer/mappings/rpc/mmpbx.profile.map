local format, gmatch = string.format, string.gmatch
local concat = table.concat
local conn = mapper("ubus").connect()

local mmpbx_profile = {
    objectType = {
        name = "rpc.mmpbx.profile.@.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = math.huge,
        parameters = {
            networkName = {
                access = "readOnly",
                type = "string",
            },
            enable = {
                access = "readOnly",
                type = "string",
            },
            usable = {
                access = "readOnly",
                type = "string",
            },
            networkType = {
                access = "readOnly",
                type = "string",
            },
            sipRegisterState = {
                access = "readOnly",
                type = "string",
            },
            failReason = {
                access = "readOnly",
                type = "string",
            },
            uri = {
                access = "readOnly",
                type = "string",
            },
            callState = {
                access = "readOnly",
                type = "string",
            },
        }
    }
}

local function entriesProfile ()
    local profiles, entries = {}, {}
    profiles = conn:call("mmpbx.profile", "get", {} )
    if profiles then
        for name, _ in pairs (profiles) do
            entries[#entries+1] = name
        end
    end
    return entries
end

local function get(mapping, paramname, key)
    local content = {}
    if paramname == "callState" then
        content = conn:call("mmpbx.call", "get", {})
        if content then
            for _,v in pairs(content) do
                if v.profile == key then
                    return v[paramname]
                end
            end
            return "MMPBX_CALLSTATE_IDLE"
        end
    else
        content = conn:call("mmpbx.profile", "get", { profile = key } )
        if content and content[key] and content[key][paramname] then
            return content[key][paramname]
        end
    end
    return ""
end

local function getAllProfiles(mapping, key)
    local content = conn:call("mmpbx.profile", "get", { profile = key } )
    local data = {}
    if content then
        for _, v in pairs (content) do
            if (type(v) == "table") then
                for param, value in pairs (v) do
                    data[param] = value
                end
            end
        end
    end
    local content = conn:call("mmpbx.call", "get", {})
    if content then
        data["callState"] = "MMPBX_CALLSTATE_IDLE"
        for _,v in pairs(content) do
            if v.profile == key then
                data["callState"] = v["callState"]
                break
            end
        end
    else
        data["callState"] = ""
    end
    return data
end

mmpbx_profile.entries = entriesProfile
mmpbx_profile.getall = getAllProfiles
mmpbx_profile.get = get

register(mmpbx_profile)

-----------------------------------
--- rpc.mmpbx.sip_profile.@. ------
-----------------------------------
local mmpbx_sipprofile = {
    objectType = {
      name = "rpc.mmpbx.sip_profile.@.",
      access = "readWrite",
      minEntries = 0,
      maxEntries = math.huge,
      parameters = {
          enabled = {
              access = "readWrite",
              type = "boolean",
          },
          user_name = {
              access = "readWrite",
              type = "string",
          },
          password = {
              access = "readWrite",
              type = "password",
          },
          uri = {
              access = "readWrite",
              type = "string",
          },
          display_name = {
              access = "readWrite",
              type = "string",
          },
          network = {
              access = "readWrite",
              type = "string",
          },
          dial_plan = {
              access = "readOnly",
              type = "string",
          },
          port = {
              access = "readWrite",
              type = "string",
          },
      }
    }
}

local mmpbx_updateprofile = {
    objectType = {
      name = "rpc.mmpbx.update_profile.@.",
      access = "readOnly",
      minEntries = 0,
      maxEntries = math.huge,
      parameters = {
          enabled = {
              access = "readWrite",
              type = "boolean",
          },
          user_name = {
              access = "readWrite",
              type = "string",
          },
          password = {
              access = "readWrite",
              type = "password",
          },
          uri = {
              access = "readWrite",
              type = "string",
          },
          display_name = {
              access = "readWrite",
              type = "string",
          },
      }
    }
}

local uci_helper = mapper("ucihelper")
local sipnet_binding = { config="mmpbxrvsipnet" }
local mmpbx_binding = { config="mmpbx" }
local binding = {}
local transactions = {}
local profile_helper = require("transformer.shared.profile_helper")
local profile_default = require("transformer.shared.servicedefault")
local f_port_enabled = profile_default.f_port_enabled

local dev_config = {
    sipdev="mmpbxrvsipdev",
    dect = "mmpbxbrcmdectdev",
    fxs  ="mmpbxbrcmfxsdev",
}
local fxs_binding = { config=dev_config["fxs"], option="relay_state" }

local revert = {
    ["1"] = "0",
    ["0"] = "1",
}

mmpbx_sipprofile.entries =  function()
    local entries = {}
    sipnet_binding.sectionname = "profile"
    uci_helper.foreach_on_uci(sipnet_binding, function(s)
        entries[#entries+1] = s['.name']
    end)
    return entries
end

mmpbx_updateprofile.entries =  function()
    local entries = {}
    sipnet_binding.sectionname = "profile"
    uci_helper.foreach_on_uci(sipnet_binding, function(s)
        entries[#entries+1] = s['.name']
    end)
    return entries
end

mmpbx_sipprofile.getall = function(mapping, key)
    sipnet_binding.sectionname = key
    return uci_helper.getall_from_uci(sipnet_binding)
end

local order = {
    f = 1,
    d = 2,
    s = 3,
}

local function get_devices_from_uci(key)
    mmpbx_binding.sectionname = "incoming_map"
    local devices
    uci_helper.foreach_on_uci(mmpbx_binding, function(s)
        if s.profile == key and type(s.device) == "table" then
            devices = s.device
            return
        end
    end)
    if devices then
        table.sort(devices, function(a,b)
            local order_a = order[a:sub(1,1)]
            local order_b = order[b:sub(1,1)]
            if order_a < order_b or (order_a == order_b and a < b) then
                return true
            else
                return false
            end
        end)
        return concat(devices, ",")
    end
    return ""
end
mmpbx_updateprofile.get = function(mapping, param, key)
    sipnet_binding.sectionname = key
    sipnet_binding.option = param
    return uci_helper.get_from_uci(sipnet_binding)
end

mmpbx_updateprofile.set = function(mapping, param, value, key)
    sipnet_binding.sectionname = key
    sipnet_binding.option = param
    uci_helper.set_on_uci(sipnet_binding, value)
    transactions[sipnet_binding.config] = true
    if param == "enabled" then
        conn:call("mmpbx.profile", "update", {["profile"]=key, ["enable"]=tonumber(value)})
    end
    if param == "user_name" or param == "password" or param == "uri" then
        conn:call("mmpbx.profile", "update", {["profile"]=key, ["SIP"]={
                                                                       {[tostring(param)]=value}}
                                                                       })
    end
end

mmpbx_sipprofile.get = function(mapping, param, key)
    if param == "port" then
        return get_devices_from_uci(key)
    elseif param == "dial_plan" then
        local pattern = {}
        mmpbx_binding.sectionname = "dial_plan_entry"
        uci_helper.foreach_on_uci(mmpbx_binding, function(s)
            if s["forced_profile"] == key then
                pattern[#pattern+1] = s["pattern"] and s["pattern"]:match("%^(.*)")
            end
        end)
        return concat(pattern,",")
    else
        sipnet_binding.sectionname = key
        sipnet_binding.option = param
        return uci_helper.get_from_uci(sipnet_binding)
    end
end

local all_devices
local function get_all_devices()
    if not all_devices then
        local binding = { sectionname = "device"}
        all_devices = {}
        for k,v in pairs(dev_config) do
            binding.config = v
            uci_helper.foreach_on_uci(binding, function(s)
                all_devices[#all_devices+1] = s[".name"]
            end)
        end
    end
    return all_devices
end

local function set_f_port(value, profile)
    sipnet_binding.sectionname = "profile"
    local state = "0"
    uci_helper.foreach_on_uci(sipnet_binding, function(s)
        if (s["enabled"] == "1" and s[".name"] ~= profile) or value == "1" then
            state = "1"
            return true
        end
    end)
    binding.config = "mmpbxbrcmfxonet"
    binding.sectionname = "fxo_profile"
    binding.option = "enabled"
    local old_state = uci_helper.get_from_uci(binding)
    if old_state ~= revert[state] then
        uci_helper.set_on_uci(binding, revert[state], commitapply)
        transactions[binding.config] = true
    end

    binding.config = dev_config["fxs"]
    binding.sectionname = "device"
    uci_helper.foreach_on_uci(binding, function(s)
         if s["relay_state"] and s["relay_state"] ~= state then
             fxs_binding.sectionname = s[".name"]
             uci_helper.set_on_uci(fxs_binding, state, commitapply)
             transactions[fxs_binding.config] = true
         end
    end)
end

mmpbx_sipprofile.set = function(mapping, param, value, key)
    if param == "port" then
        local ports
        if value == "" or value == "none" then
            ports = {}
        elseif value == "common" then
            ports = get_all_devices()
        else
            ports = {}
            for port in gmatch(value, "([^,]+)") do
                ports[#ports+1] = port
            end
        end
        profile_helper.port_set(key, ports, transactions, commitapply)
    else
        sipnet_binding.sectionname = key
        sipnet_binding.option = param
        uci_helper.set_on_uci(sipnet_binding, value, commitapply)
        transactions[sipnet_binding.config] = true
        --The f_port_enabled can be nil or true, when the set_f_port can be accessed
        if param == "enabled" and not (false == f_port_enabled) then
            set_f_port(value, key)
        end
    end
end

mmpbx_sipprofile.add = function(mapping, name)
    local add_sipnet_defauls = false
    return profile_helper.profile_add(add_sipnet_defauls, transactions, commitapply)
end

mmpbx_sipprofile.delete = function(mapping, key)
    profile_helper.profile_delete(key, transactions, commitapply)
    if not (false == f_port_enabled) then
     set_f_port("0", key)
    end
    return true
end

mmpbx_sipprofile.commit = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
end

mmpbx_sipprofile.revert = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
end


mmpbx_updateprofile.commit = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
end

mmpbx_updateprofile.revert = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
end

register(mmpbx_sipprofile)
register(mmpbx_updateprofile)

-----------------------------------
--rpc.mmpbx.internal_profile.@. ---
-----------------------------------
local mmpbx_internalprofile = {
    objectType = {
      name = "rpc.mmpbx.internal_profile.@.",
      access = "readOnly",
      minEntries = 0,
      maxEntries = math.huge,
      parameters = {
          enabled = {
              access = "readOnly",
              type = "boolean",
          },
          number = {
              access = "readOnly",
              type = "string",
          },
          port = {
              access = "readOnly",
              type = "string",
          },
      }
    }
}

local internalnet_binding = {config="mmpbxinternalnet"}

mmpbx_internalprofile.entries = function()
    local entries = {}
    internalnet_binding.sectionname = "profile"
    uci_helper.foreach_on_uci(internalnet_binding, function(s)
       entries[#entries+1] = s['.name']
    end)
    return entries
end

mmpbx_internalprofile.get = function(mapping, param, key)
    if param == "port" then
        return get_devices_from_uci(key)
    else
        internalnet_binding.sectionname = key
        internalnet_binding.option = param
        return uci_helper.get_from_uci(internalnet_binding)
    end
end

register(mmpbx_internalprofile)
