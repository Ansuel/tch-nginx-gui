local rpc_user_ = {
  objectType = {
    name = "rpc.user.@.",
    access = "readOnly",
    numEntriesParameter = "UserNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    aliasParameter = "Alias",
    parameters = {
      pwcrypt = {
        access = "readWrite",
        type = "string",
      },
    }
  }
}

local scp = require 'transformer.shared.setClashPassword'
local pwcrypts = {}

-- In current implementation, only clash users are listed,
-- since pwcrypt is only relevant for CLI users
rpc_user_.entries = function()
  local users  = {}
  local usersC = scp.listClashUsers()
  for user in pairs(usersC) do
    users[#users+1] = user
  end
  return users
end

rpc_user_.get = {
  pwcrypt = "", -- do not expose any password data
}

rpc_user_.set = {
  pwcrypt = function (mapping, param, value, key)
    -- key is user name, value the crypted password
    -- Store crypted password if value valid; effective update happens in commit()
    local ok, msg = scp.validateCredentials(key, value, true)
    if not ok then
      return ok, msg
    else
      pwcrypts[key] = value
    end
  end,
}

rpc_user_.commit = function ()
  for user, pwc in pairs(pwcrypts) do
    scp.setCryptedPassword(user, pwc)
  end
  pwcrypts = {}
end

rpc_user_.revert = function ()
  pwcrypts = {}
end

register(rpc_user_)
