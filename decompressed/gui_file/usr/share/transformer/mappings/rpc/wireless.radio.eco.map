local wireless_radio_eco_ = {
  objectType = {
    name = "rpc.wireless.radio.@.eco.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      state = {
          access = "readWrite",
          type = "unsignedInt",
      },
      fast_radio_toggle = {
          access = "readOnly",
          type = "string",
      },
      single_rx_chain = {
          access = "readOnly",
          type = "string",
      },
      force_radio_down = {
          access = "readWrite",
          type = "unsignedInt",
      },
    }
  }
}

local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()

local function nilToEmptyString(st)
    if st == nil then
        return ""
    else
        return tostring(st)
    end
end

local function getDataForRadio(radio)
    local result = conn:call("wireless.radio.eco", "get", { name = radio })
    if result == nil then
        return {}
    end
    return result[radio]
end

local function getall(mapping, key)
	local radioData = getDataForRadio(key)
	local sanitizedData = {}
	for k,v in pairs(radioData) do
		sanitizedData[k] = nilToEmptyString(v)
	end
	return sanitizedData
end

local function get(mapping, paramName, key)
	local radioData = getDataForRadio(key)
	return nilToEmptyString(radioData[paramName]);
end


wireless_radio_eco_.getall = getall
wireless_radio_eco_.get = get

wireless_radio_eco_.set = {
	state = function(mapping, param, value, key)
		conn:call("wireless.radio.eco", "set", {name = key, state = tonumber(value)})
	end,
	force_radio_down = function(mapping, param, value, key)
		conn:call("wireless.radio.eco", "set", {name = key, state = tonumber(value), force_radio_down = tonumber(value)})
	end,
}
register(wireless_radio_eco_)
