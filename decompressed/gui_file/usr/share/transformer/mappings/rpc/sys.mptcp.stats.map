local register = register
local tostring = tostring
--manually generated
local sys_mptcp_ = {
  objectType = {
    name = "sys.mptcp.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

register(sys_mptcp_)

local sys_mptcp_stats_ = {
  objectType = {
    name = "sys.mptcp.stats.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = 1,
    parameters = {
      SessionCount = {
        access = "readOnly",
        type = "unsignedInt",
      },
      SessionsWithAdditionalSubFlowCount = {
        access = "readOnly",
        type = "unsignedInt",
      },
      AdditionalSubFlowCount = {
        access = "readOnly",
        type = "unsignedInt",
      },
      CustomerCount = {
        access = "readOnly",
        type = "unsignedInt",
      },
      ClosedSessionCount = {
        access = "readOnly",
        type = "unsignedInt",
      },
    }
  }
}

--  Below is the sample of /proc/net/mptcp_net/mptcp file
--  sl  loc_tok  rem_tok  v6 local_address   remote_address    st  ns  tx_queue rx_queue inode
--  0:  E56395BF 7F89B84  0  AC120F67:9D61   0A320502:0050     01  02  00000000:000FEDCC 942927

local statValues = {}
local statsKey = lfs.attributes("/proc/net/mptcp_net/mptcp", "mode") == "file" and { "1" } or {}

sys_mptcp_stats_.entries = function()
  return statsKey
end

local function getStats(param)
  local customerTable = {}
  statValues["SessionCount"] = 0
  statValues["SessionsWithAdditionalSubFlowCount"] = 0
  statValues["AdditionalSubFlowCount"] = 0
  statValues["CustomerCount"] = 0
  statValues["ClosedSessionCount"] = 0
  local isFirstLine = true
  local count = 0
  local fd = io.open("/proc/net/mptcp_net/mptcp")
  if fd then
    for line in fd:lines() do
      if isFirstLine then
        isFirstLine = false
      else
        local sixthField, seventhField, eighthField = line:match("^%s*%S+%s+%S+%s+%S+%s+%S+%s+%S+%s+(%S+)%s+(%S+)%s+(%S+).*")
        -- Checking the first part (before colon) of field 8 (remote_address) to get the number of customers
        local customer = sixthField and sixthField:match("(.*):.*")
        if customer and not customerTable[customer] then
          customerTable[customer] = true
          count = count + 1
          statValues["CustomerCount"] = count
        end
        -- Checking only field 7 (st) with value "01" (established session) to get the session count
        if seventhField and seventhField == "01" then
          statValues["SessionCount"] = statValues["SessionCount"] + 1
        end
        if seventhField and seventhField == "02" then
          statValues["ClosedSessionCount"] = statValues["ClosedSessionCount"] + 1
        end
        if eighthField then
          -- Checking only field 8 (ns) with value other than "01" to get the additional subflow count
          if eighthField ~= "01" and seventhField == "01" then
            statValues["AdditionalSubFlowCount"] = statValues["AdditionalSubFlowCount"] + eighthField - 1
          end
          if eighthField ~= "01" then
            statValues["SessionsWithAdditionalSubFlowCount"] = statValues["SessionsWithAdditionalSubFlowCount"] + 1
          end
        end
      end
    end
    fd:close()
  end
  return param and statValues[param] or statValues
end

sys_mptcp_stats_.get = function(mapping, param)
  return tostring(getStats(param))
end

sys_mptcp_stats_.getall = function()
  local allValues = getStats()
  return {
    SessionCount = tostring(allValues["SessionCount"]),
    SessionsWithAdditionalSubFlowCount = tostring(allValues["SessionsWithAdditionalSubFlowCount"]),
    AdditionalSubFlowCount = tostring(allValues["AdditionalSubFlowCount"]),
    CustomerCount = tostring(allValues["CustomerCount"]),
    ClosedSessionCount = tostring(allValues["ClosedSessionCount"]),
  }
end

register(sys_mptcp_stats_)
