do
  -- only register this mapping if the device has the 'bmud'
  local fd = io.open("/usr/bin/bmud")
  if not fd then
    return
  end
  fd:close()
end

local battery_ = {
  objectType = {
    name = "rpc.system.battery.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {}
  }
}

register(battery_)

local bmustatus_ = {
  objectType = {
    name = "rpc.system.battery.bmustatus.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      version                = { access = "readOnly", type = "string", },
      build_date_time        = { access = "readOnly", type = "string", },
      operating_on_battery   = { access = "readOnly", type = "boolean", },
      bmu_state              = { access = "readOnly", type = "string", },
      est_minutes_remaining  = { access = "readOnly", type = "int", },
      temperature            = { access = "readOnly", type = "int", },
      num_batteries          = { access = "readOnly", type = "int", },
      input_voltage          = { access = "readOnly", type = "int", },
      battery_current        = { access = "readOnly", type = "int", },
      ups_seconds_on_battery = { access = "readOnly", type = "int", },
    }
  }
}

local battery_mapdata = {}

local function readFile()
   local statusFile="/tmp/batstatus"
   local fd = io.open(statusFile)

   if not fd then
      return {}
   end

   local t = fd:read("*all")
   fd:close()

   for param1, param2 in string.gmatch(t, "([%w_]+)=([%w:.%-]+)") do
      battery_mapdata[param1] = param2
   end
end

local function get(mapping, paramName)
      readFile()
      return battery_mapdata[paramName] or ""
end

local function getall(mapping)
      readFile()
      return battery_mapdata
end

-----------------------------------------------------------------
-- GET IMPLEMENTATION (datamodel.get CALLS THIS)
-----------------------------------------------------------------
bmustatus_.get = get

bmustatus_.getall = getall

register(bmustatus_)

local batteryStatus_ = {
  objectType = {
    name = "rpc.system.battery.status.@.",
    access = "readOnly",
    numEntriesParameter = "StatusNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      battery_present        = { access = "readOnly", type = "boolean", },
      battery_valid          = { access = "readOnly", type = "boolean", },
      battery_bad            = { access = "readOnly", type = "boolean", },
      battery_selected       = { access = "readOnly", type = "boolean", },
      battery_fullycharged   = { access = "readOnly", type = "boolean", },
      battery_charge_low     = { access = "readOnly", type = "boolean", },
      battery_charge_lowpercent     = { access = "readOnly", type = "boolean", },
      battery_charge_depleted       = { access = "readOnly", type = "boolean", },
      battery_charge_stateunknown   = { access = "readOnly", type = "boolean", },
      battery_charge_capacity       = { access = "readOnly", type = "int", },
      battery_actual_capacity       = { access = "readOnly", type = "int", },
      battery_fullcharge_voltage    = { access = "readOnly", type = "int", },
      battery_depleted_voltage      = { access = "readOnly", type = "int", },
      battery_measured_voltage      = { access = "readOnly", type = "int", },
      battery_percent_charge        = { access = "readOnly", type = "int", },
      battery_est_minutes_remaining = { access = "readOnly", type = "int", },
      battery_temperature           = { access = "readOnly", type = "int", },
      battery_lifetestcount         = { access = "readOnly", type = "int", },
      battery_lastlifetest_time     = { access = "readOnly", type = "string", },
      battery_nextlifetest_time     = { access = "readOnly", type = "string", },
      battery_lifetest_state        = { access = "readOnly", type = "string", },
      battery_stateofhealth         = { access = "readOnly", type = "int", },
    }
  }
}

local batteryStatus_mapdata = {}

local function readStatusFile(key)
   local statusFile="/tmp/battery_status"..key
   local fd = io.open(statusFile)

   if not fd then
      return {}
   end

   local t = fd:read("*all")
   fd:close()

   for param1, param2 in string.gmatch(t, "([%w_]+)=([%w:.%-]+)") do
      batteryStatus_mapdata[param1] = param2
   end
end

local function getStatus(mapping, paramName, key)
      readStatusFile(key)
      return batteryStatus_mapdata[paramName] or ""
end

local function entriesBatteries(mapping)
      local entries = {}
      local NumBatteries = "0"

      readFile()
      NumBatteries = battery_mapdata["num_batteries"]

      if ((NumBatteries ~= nil) and (tonumber(NumBatteries) > 0)) then
          for i=1, tonumber(NumBatteries) do
              entries[#entries+1] = tostring(i)
          end
      end

      return entries
end

batteryStatus_.entries = entriesBatteries
batteryStatus_.get = getStatus

register(batteryStatus_)
