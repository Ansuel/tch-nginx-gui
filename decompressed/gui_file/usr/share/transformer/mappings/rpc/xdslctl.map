local logger = require("transformer.logger")
local log = logger.new("rpc.xdslctl", 2)
local format, concat, popen = string.format , table.concat , io.popen
local register = register;

local xdslctl_ = {
    objectType = {
        name = 'rpc.xdslctl.',
        access = 'readOnly',
        minEntries = 1,
        maxEntries = 1,
        parameters = {
          HlogUs1 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs2 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs3 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs4 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs1 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs2 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs3Split2 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs4 = {
            access = "readOnly",
            type = "string"
          },
		  HlogScanBand = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs1 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs2 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs3 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs4 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs1 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs2 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs3Split2 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs4 = {
            access = "readOnly",
            type = "string"
          },
		  BitsScanBand = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs2 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs3 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs4 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs2 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs3Split2 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs4 = {
            access = "readOnly",
            type = "string"
          },
		  QLNScanBand = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs2 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs3 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs4 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs2 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs4 = {
            access = "readOnly",
            type = "string"
          },
		  SNRScanBand = {
            access = "readOnly",
            type = "string"
          },
		  Us1BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us2BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us3BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us4BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds1BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds2BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds3BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds4BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us1BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us2BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us3BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us4BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds1BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds2BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds3BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds4BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us1ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Us2ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Us3ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Us4ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Ds1ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Ds2ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Ds3ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Ds4ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  UsBandNumber = {
            access = "readOnly",
            type = "string"
          },
		  DsBandNumber = {
            access = "readOnly",
            type = "string"
          },
		  DslamChipset = {
            access = "readOnly",
            type = "string"
          },
		  DslamVersion = {
            access = "readOnly",
            type = "string"
          },
		  DslamVersionRaw = {
            access = "readOnly",
            type = "string"
          },
        }
    }
}

local function xdslband(n,dtype,bandtype)
	local line
	if ( bandtype == "Us" ) then
		line = 12
	else
		line = 13
	end
	local linescan=1
	local cmd = ("xdslctl info --pbParams")
	local f = assert(popen(cmd, 'r'))
	local s = ""
	for l in f:lines() do
		if linescan == line then
			s = l
			break
		end
		linescan=linescan+1
	end
	local r = "0"
	local c = 1
	f:close()
	s = s:gsub('[\n\r]+', '')
	for w in s:gmatch("%((.-)%)") do
		if c == n then
			if dtype == "Initial" then
				r = string.match(w,"(.-)%,")
			elseif dtype == "Final" then
				r = string.match(w,"%,(%d*)")
			end
			if not ( dtype == BandNumber ) then
				break
			end
		end
		c=c+1
	end
	
	if dtype == "BandNumber" then
		return tostring(c-1)
	else
		return r
	end
end

local function xdslctlget(dtype,request,band,bandtype,split)
    local data = {}
	local n  = 0
	local scannedband = 0
	local scanband = ""
	local bandstart = tonumber(xdslband(band,"Initial",bandtype)) or 0
	local bandend = tonumber(xdslband(band,"Final",bandtype)) or -1
	local cmd = "xdslctl info --" .. request
	
	local f = assert(popen(cmd,"r"))
	
	if bandtype == "Us" and band == 1 then
		bandstart = 0
	elseif bandtype == "Ds" and band == 1 then
		bandstart = tonumber(xdslband(1,"Final","Us"))+1
	elseif bandtype == "Us" and band == 2 then
		bandstart = tonumber(xdslband(1,"Final","Ds"))+1
		if xdslband(2,"Final","Us") == 0 then --We don't have Us2, execpt we are in no VDSL
			bandend = 512 --Max bit for ADSL2+
		end
	elseif bandtype == "Ds" and band == 2 then
		bandstart = tonumber(xdslband(2,"Final","Us"))+1
	elseif bandtype == "Us" and band == 3 then
		bandstart = tonumber(xdslband(2,"Final","Ds"))+1
	elseif bandtype == "Us" and band == 4 then
		bandstart = tonumber(xdslband(3,"Final","Us"))+1
	elseif bandtype == "Ds" and band == 3 then
		if tonumber(xdslband(4,"Final","Us")) == 0 then --The Us4 band is not present!
			bandstart = tonumber(xdslband(3,"Final","Us"))+1 --Take the Us3 to start
		else
			bandstart = tonumber(xdslband(4,"Final","Us"))+1
		end
		if bandend > 4096 then --We are on 35b mode
			if split == 1 then
				bandend = bandstart+(math.floor((8192-bandstart)/2))
			elseif split == 2 then
				bandstart = bandstart+(math.floor((8192-bandstart)/2))+1
				bandend = 8192 --Max bit for 35b
			end
		else
			if split == 2 then
				bandstart = 0
				bandend = -1
			end
		end
	elseif bandtype == "Ds" and band == 4 then
		bandstart = tonumber(xdslband(3,"Final","Ds"))+1
	end
	
	for l in f:lines() do
		if n>=(bandstart+8) and n<=(bandend+8) then
			if not ( dtype == "scanband" ) then
				if n>(bandend+8) then
					break
				end
				if dtype == "data" then
					if request == "Hlog" then
						l = l:gsub("(.*)-",""):sub(1, -4)
						if ( tonumber(l)*-1 > -96 ) then 
							data[#data+1] = format("-%s,",l)
						else
							data[#data+1] = "NaN,"
						end
					elseif request == "QLN" then
						l = l:gsub("(.*)-",""):sub(1, -4)
						if ( tonumber(l)*-1 > -160 ) then 
							data[#data+1] = format("-%s,",l)
						else
							data[#data+1] = "NaN,"
						end
					elseif request == "SNR" then
						l = l:sub(-8):gsub("%s*",""):sub(1, -3)
						if ( tonumber(l) > 0 ) then 
							data[#data+1] = format("%s,",l)
						else
							data[#data+1] = "NaN,"
						end
					elseif request == "Bits" then
						l = l:sub(-2):gsub("%s*","")
						if ( tonumber(l) > 0 ) then 
							data[#data+1] = format("%s,",l)
						else
							data[#data+1] = "NaN,"
						end
					end
				elseif dtype == "scannedband" then
					scannedband=scannedband+1
				end
			end
		end
		n=n+1
	end
	f:close()
	
	scanband = tostring(n-8)
	
	if dtype == "data" then
		return concat(data) or ""
	elseif dtype == "scanband" then
		return scanband
	elseif dtype == "scannedband" then
		return tostring(scannedband)
	end
end

local function xdslctlDslamInfo(itype)
	local cmd = "xdslctl info --vendor"
	local arg = " "
	local result = " "
	
	local chipset_arg=" | sed '8q;d' | cut -d ':' -f 2 | sed -e 's/^[ \t]*//'"
	local chipset_read=popen(cmd .. chipset_arg)
	local chipset = chipset_read:read()
	chipset_read:close()
	
	if itype == "chipset" then
		result = chipset
	elseif itype == "version" or itype == "version_raw" then
		arg=" | sed '8q;d' | cut -d ':' -f 3"
		local version_read = popen(cmd .. arg)
		result = version_read:read()
		if itype == "version" then
			if result:sub(0,2) == "0x" then
				if chipset:match("BDCM") then
					result = result:gsub("(.*)x","")
					result = tonumber(result:sub(0,2),16) .. "." .. tonumber(result:sub(3,4),16)
				elseif chipset:match("IFTN") then
					result = result:gsub("(.*)x","")
					result = tonumber(result:sub(0,1),16) .. "." .. tonumber(result:sub(2,3),16) .. "." .. tonumber(result:sub(4,4),16)
				end
			end
		end
		version_read:close()
	end
	
	return result
end

local function get(mapping, paramName, key)
	if paramName == "HlogScanBand" then
		return xdslctlget("scanband","Hlog",0,"Ds")
	elseif paramName:match("Hlog") then
		local band = tonumber(paramName:sub(7,7))
		local bandtype = paramName:sub(5,6)
		if paramName:match("Split1") then
			return xdslctlget("data","Hlog",band,bandtype,1)
		elseif paramName:match("Split2") then
			return xdslctlget("data","Hlog",band,bandtype,2)
		end
		return xdslctlget("data","Hlog",band,bandtype)
	elseif paramName == "BitsScanBand" then
		return xdslctlget("scanband","Bits",0,"Ds")
	elseif paramName:match("Bits") then
		local band = tonumber(paramName:sub(7,7))
		local bandtype = paramName:sub(5,6)
		if paramName:match("Split1") then
			return xdslctlget("data","Bits",band,bandtype,1)
		elseif paramName:match("Split2") then
			return xdslctlget("data","Bits",band,bandtype,2)
		end
		return xdslctlget("data","Bits",band,bandtype)
	elseif paramName == "QLNScanBand" then
		return xdslctlget("scanband","QLN",0,"Ds")
	elseif paramName:match("QLN") then
		local band = tonumber(paramName:sub(6,6))
		local bandtype = paramName:sub(4,5) 
		if paramName:match("Split1") then
			return xdslctlget("data","QLN",band,bandtype,1)
		elseif paramName:match("Split2") then
			return xdslctlget("data","QLN",band,bandtype,2)
		end
		return xdslctlget("data","QLN",band,bandtype)
	elseif paramName == "SNRScanBand" then
		return xdslctlget("scanband","SNR",0,"Ds")
	elseif paramName:match("SNR") then
		local band = tonumber(paramName:sub(6,6))
		local bandtype = paramName:sub(4,5) 
		if paramName:match("Split1") then
			return xdslctlget("data","SNR",band,bandtype,1)
		elseif paramName:match("Split2") then
			return xdslctlget("data","SNR",band,bandtype,2)
		end
		return xdslctlget("data","SNR",band,bandtype)
	elseif paramName:match("Final") then
		local band = tonumber(paramName:sub(3,3))
		local bandtype = paramName:sub(1,2)
		return xdslband(band,"Final",bandtype)
	elseif paramName:match("Initial") then
		local band = tonumber(paramName:sub(3,3))
		local bandtype = paramName:sub(1,2)
		return xdslband(band,"Initial",bandtype)
	elseif paramName:match("BandNumber") then
		local bandtype = paramName:sub(1,2)
		return xdslband(0,"BandNumber",bandtype)
	elseif paramName:match("ScannedBand") then
		local band = tonumber(paramName:sub(3,3))
		local bandtype = paramName:sub(1,2)
		return xdslctlget("scannedband","SNR",band,bandtype)
	elseif paramName == "DslamChipset" then
		return xdslctlDslamInfo("chipset")
	elseif paramName == "DslamVersion" then
		return xdslctlDslamInfo("version")
	elseif paramName == "DslamVersionRaw" then
		return xdslctlDslamInfo("version_raw")
	end
end

xdslctl_.get = get

register(xdslctl_)