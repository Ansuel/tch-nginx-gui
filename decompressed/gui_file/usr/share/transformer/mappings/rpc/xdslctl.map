local logger = require("transformer.logger")
local log = logger.new("rpc.xdslctl", 2)
local register = register;

local xdslctl_ = {
    objectType = {
        name = 'rpc.xdslctl.',
        access = 'readOnly',
        minEntries = 1,
        maxEntries = 1,
        parameters = {
          HlogUs1 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs2 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs3 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs4 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs1 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs2 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs3 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs4 = {
            access = "readOnly",
            type = "string"
          },
		  HlogScanBand = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs1 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs2 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs3 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs4 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs1 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs2 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs3 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs4 = {
            access = "readOnly",
            type = "string"
          },
		  BitsScanBand = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs2 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs3 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs4 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs2 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs3 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs4 = {
            access = "readOnly",
            type = "string"
          },
		  QLNScanBand = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs2 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs3 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs4 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs2 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs3 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs4 = {
            access = "readOnly",
            type = "string"
          },
		  SNRScanBand = {
            access = "readOnly",
            type = "string"
          },
		  Us1BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us2BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us3BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us4BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds1BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds2BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds3BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds4BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us1BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us2BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us3BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us4BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds1BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds2BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds3BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds4BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  UsBandNumber = {
            access = "readOnly",
            type = "string"
          },
		  DsBandNumber = {
            access = "readOnly",
            type = "string"
          },
        }
    }
}

local function xdslband(n,dtype,bandtype)
	local line
	if ( bandtype == "Us" ) then
		line = "12p"
	else
		line = "13p"
	end
	local cmd = ("xdslctl info --pbParams | sed -n " .. line) 
	local f = assert(io.popen(cmd, 'r'))
	local s = assert(f:read('*a'))
	local r = "0"
	local c = 1
	f:close()
	s = string.gsub(s, '[\n\r]+', ' ')
	for w in string.gmatch (s, "%((.-)%)") do
		if c == n then
			if dtype == "Initial" then
				r = string.match(w,"(.-)%,")
			elseif dtype == "Final" then
				r = string.match(w,"%,(%d*)")
			end
		end
		c=c+1
	end
	if dtype == "BandNumber" then
		return tostring(c-1)
	else
		return r
	end
end

local function xdslctlget(dtype,request,band,bandtype)
    local data = ""
	local n  = 0
	local scanband = ""
	local bandstart = tonumber(xdslband(band,"Initial",bandtype))+8
	local bandend = tonumber(xdslband(band,"Final",bandtype))+8
	local cmd = "xdslctl info --" .. request
	
	local f = assert(io.popen(cmd,"r"))
	
	for l in f:lines() do
		if n>=bandstart and n<=bandend then
			if request == "Hlog" then
				l = l:gsub("(.*)-","")
				l = "-" .. l
				if ( tonumber(l) > -96 ) then 
					data = data .. l .. ", "
				else
					data = data .. "NaN" .. ", "
				end
			elseif request == "QLN" then
				l = l:gsub("(.*)-","")
				l = "-" .. l
				if ( tonumber(l) > -160 ) then 
					data = data .. l .. ", "
				else
					data = data .. "NaN" .. ", "
				end
			elseif request == "SNR" then
				l = string.sub(l,-8)
				l = l:gsub("%s*","")
				if ( tonumber(l) > 0 ) then 
					data = data .. l .. ", "
				else
					data = data .. "NaN" .. ", "
				end
			else
				l = string.sub(l,-2)
				l = l:gsub("%s*","")
				data = data .. l .. ", "
			end
		end
		n=n+1
	end
	f:close()
	
	scanband = tostring(n-8)
	
	if dtype == "data" then
		return data
	else
		return scanband
	end
end

local function get(mapping, paramName, key)
	if paramName == "HlogScanBand" then
		return xdslctlget("scanband","Hlog",0,"Ds")
	elseif paramName:match("Hlog") then
		local band = tonumber(paramName:sub(7,7))
		local bandtype = paramName:sub(5,6)
		return xdslctlget("data","Hlog",band,bandtype)
	elseif paramName == "BitsScanBand" then
		return xdslctlget("scanband","Bits",0,"Ds")
	elseif paramName:match("Bits") then
		local band = tonumber(paramName:sub(7,7))
		local bandtype = paramName:sub(5,6)
		return xdslctlget("data","Bits",band,bandtype)
	elseif paramName == "QLNScanBand" then
		return xdslctlget("scanband","QLN",0,"Ds")
	elseif paramName:match("QLN") then
		local band = tonumber(paramName:sub(6,6))
		local bandtype = paramName:sub(4,5) 
		return xdslctlget("data","QLN",band,bandtype)
	elseif paramName == "SNRScanBand" then
		return xdslctlget("scanband","SNR",0,"Ds")
	elseif paramName:match("SNR") then
		local band = tonumber(paramName:sub(6,6))
		local bandtype = paramName:sub(4,5) 
		return xdslctlget("data","SNR",band,bandtype)
	elseif paramName:match("Final") then
		local band = tonumber(paramName:sub(3,3))
		local bandtype = paramName:sub(1,2)
		return xdslband(band,"Final",bandtype)
	elseif paramName:match("Initial") then
		local band = tonumber(paramName:sub(3,3))
		local bandtype = paramName:sub(1,2)
		return xdslband(band,"Initial",bandtype)
	elseif paramName:match("BandNumber") then
		local bandtype = paramName:sub(1,2)
		return xdslband(0,"BandNumber",bandtype)
	end
end

xdslctl_.get = get

register(xdslctl_)