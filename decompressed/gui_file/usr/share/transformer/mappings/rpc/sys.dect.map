local require = require
local register = register
local table, pairs, tostring, error = table, pairs, tostring, error
local string = string

local sys_dect_ = {
    objectType = {
        name = "sys.dect.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {},
    }
}

register(sys_dect_)

-- sys.dects.{i}
local sys_dect_device_i_ = {
  objectType = {
    name = "sys.dect.dev.{i}.",
    access = "readOnly",
    numEntriesParameter = "DeviceNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      IPUI = {
        access = "readOnly",
        type = "string",
      },
      FriendlyName = {
        access = "readOnly",
        type = "string",
      },
      LocationStatus = {
        access = "readOnly",
        type = "string",
      }
    }
  }
}

-- Open connection to UBUS
local conn = mapper("ubus").connect()

local function entriesSysDectDevices()
    local entries = {}
    local devices = conn:call("mmpbxbrcmdect.devices", "list", { })
    if devices ~= nil then 
	for k,v in pairs(devices) do
	    entries[#entries+1] = k
	end
    end
    return entries
end

sys_dect_device_i_.getall = function(mapping, key)
--print(key)
    local devices = conn:call("mmpbxbrcmdect.devices", "list", { })
--    tprint(devices)

    for k, v in pairs (devices) do
        if k == key then 
            return {
                IPUI = v["ipui"],
                FriendlyName = v["userFriendlyName"],
                LocationStatus = v["locationStatus"]
            }
        end
    end
end

sys_dect_device_i_.get = {
  IPUI = function(mapping, param, key)
    local devices = conn:call("mmpbxbrcmdect.devices", "list", { })
    for k, v in pairs (devices) do
        if k == key then 
            return v["ipui"]
        end
    end
  end,
  FriendlyName = function(mapping, param, key)
    local devices = conn:call("mmpbxbrcmdect.devices", "list", { })
    for k, v in pairs (devices) do
        if k == key then 
            return v["userFriendlyName"]
        end
    end
  end,
  LocationStatus = function(mapping, param, key)
    local devices = conn:call("mmpbxbrcmdect.devices", "list", { })
    for k, v in pairs (devices) do
        if k == key then 
            return v["locationStatus"]
        end
    end
  end
}

sys_dect_device_i_.entries = entriesSysDectDevices
register(sys_dect_device_i_)
