local register = register
local lfs = require("lfs")
local popen = require("modgui").popen
local iopen = io.open
local match, format = string.match, string.format

local sys_mem_ = {
  objectType = {
    name = "sys.mem.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      RAMTotal = {
        access = "readOnly",
        type = "string",
      },
      RAMUsed = {
        access = "readOnly",
        type = "string",
      },
      RAMFree = {
        access = "readOnly",
        type = "string",
      },
      flashTotal = {
        access = "readOnly",
        type = "string",
      },
      flashUsed = {
        access = "readOnly",
        type = "string",
      },
      flashFree = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

--[[
a) get free memory size (KB)

root@vodafone:~# cat /proc/meminfo
MemTotal:         433252 kB
MemFree:          130664 kB
MemAvailable:     192548 kB

==> RAMTotal = 433252
==> RAMUsed  = 241280
==> RAMFree  = 130664

b) get free flash size (KB)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ on vant-4
root@OpenWrt:/# cat /proc/mtd
dev:    size   erasesize  name
mtd0: 08000000 00020000 "brcmnand.0"
mtd1: 02c60000 00020000 "rootfs"
mtd2: 01f80000 00020000 "rootfs_data"
mtd3: 02e60000 00020000 "bank_1"
mtd4: 02e60000 00020000 "bank_2"
mtd5: 00020000 00020000 "eripv2"
mtd6: 00040000 00020000 "rawstorage"
mtd7: 00000003 00020000 "blversion

flashTotal = 08000000 ( /1000 will be in KB)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ on vant-u
root@OpenWrt:/rom/etc# cat /proc/mtd
dev:    size   erasesize  name
mtd0: 00ce0000 00010000 "rootfs"
mtd1: 00300000 00010000 "rootfs_data"
mtd2: 00e40000 00010000 "bank_1"
mtd3: 00e40000 00010000 "bank_2"
mtd4: 00020000 00010000 "eripv2"
mtd5: 00040000 00010000 "rawstorage"
mtd6: 00000003 00010000 "blversion"

flashTotal =~ rootfs_data + bant_1 + bant_2    ( /1000 will be in KB)


==> flashTotal ~= rootfs_data + bant_1 + bant_2 (for generic solution)

root@OpenWrt:/# df -k
Filesystem           1K-blocks      Used Available Use% Mounted on
rootfs                   32256      1252     31004   4% /
/dev/root                14592     14592         0 100% /rom
/dev/mtdblock2           32256      1252     31004   4% /overlay
overlayfs:/overlay/bank_1
                         32256      1252     31004   4% /

==> flashFree  = 31004  ( rootfs )
==> flashUsed  = $flashTotal - $flashFree
--]]

local function memInfo()
  local mem = io.lines("/proc/meminfo")
  if mem then
    local line
    local memory = {}
    for i = 0, 2 do
      line = mem()
      memory[#memory+1] = line and match(line, "%d+")
    end
    return memory
  end
  return ""
end

local mtdMemory = {
  ["rootfs_data"] = true,
  ["userfs"] = true,
  ["data_vol"] = true,
  ["bank_1"] = true,
  ["bank_2"] = true,
}

local function flashMemory()
  local totalSize = 0
  local sysPath = "/sys/class/mtd/"
  if lfs.attributes(sysPath, "mode") == "directory" then
    for file in lfs.dir(sysPath) do
      local mtdIndex = match(file, "mtd([%d])$")
      if mtdIndex then
        local nameFile = iopen(sysPath.. "mtd" .. mtdIndex .."/name")
        if nameFile then
          local mtdName = nameFile:read()
          nameFile:close()
          if mtdName and mtdMemory[mtdName] then
            local sizeFile = iopen(sysPath.. "mtd" .. mtdIndex .."/mtdblock" .. mtdIndex .."/size")
            if sizeFile then
              local mtdSize = sizeFile:read()
              totalSize = mtdSize and totalSize + tonumber(mtdSize) or totalSize
              sizeFile:close()
            end
          end
        end
      end
    end
  end
  return totalSize and format("%0.0f", totalSize) or "0.0"
end

local function flashFreeMemory()
  local free
  local df = popen("df -k")
  if df then
    for line in df:lines() do
      if match(line, "/overlay") then
        free = match(line, "(%S+)%s+%S+%%")
      end
    end
    df:close()
  end
  return free or "0"
end

sys_mem_.get = {
  -- Nil check added to handle if memInfo() failed to load at the first time
  RAMTotal = function(mapping)
    local memStat = memInfo()
    if #memStat > 0 then
      mapping.get.RAMTotal = memStat[1]
      return memStat[1]
    end
    return "0"
  end,

  RAMUsed = function()
    local ramStat = memInfo()
    local usedRAM = ""
    if ramStat[1] and ramStat[3] then
      usedRAM = tostring(tonumber(ramStat[1]) - tonumber(ramStat[3]))
    end
    return usedRAM
  end,

  RAMFree = function()
    local freeRAM = memInfo()
    return #freeRAM > 0 and freeRAM[2] or memInfo()
  end,

  -- Nil check added to handle if flashMemory() failed to load at the first time
  flashTotal = function(mapping)
    local totMemory = flashMemory()
    if totMemory ~= "0.0" then
      mapping.get.flashTotal = totMemory
      return totMemory
    end
    return "0.0"
  end,

  flashUsed = function()
    return tostring(tonumber(flashMemory()) - tonumber(flashFreeMemory()))
  end,

  flashFree = flashFreeMemory(),
}

register(sys_mem_)
