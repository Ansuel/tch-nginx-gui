local igmpproxy_interface_ = {
  objectType = {
    name = "rpc.igmpproxy.interface.@.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      state = {
        access = "readOnly",
        type = "string",
      },
      querier = {
        access = "readOnly",
        type = "boolean",
      },
    }
  }
}

local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()

local binding = {
  config="igmpproxy",
  sectionname="interface",
}

local function entriesInterfaces(mapping)
    local intfs = {}
    uci_helper.foreach_on_uci(binding, function(s)
      if s.state == "downstream" or s.state == "upstream" then
        intfs[#intfs+1]= s['.name']
      end
    end)
    return intfs
end

igmpproxy_interface_.get = {
  state = function(mapping, param, key)
      local ubus_info = conn:call("igmpproxy.interface", "get", { interface = key })
      if ( ubus_info ~= nil ) then
        for k,v in pairs(ubus_info) do -- only take the first (as only 1 element expected)
          return (v and v['state']) or ""
        end
      else
        return ""
      end
  end,
  querier = function(mapping, param, key)
      local ubus_info = conn:call("igmpproxy.interface", "get", { interface = key })
      if ( ubus_info ~= nil ) then
        for k,v in pairs(ubus_info) do -- only take the first (as only 1 element expected)
          v = v and v['querier']
          if (v) then
            return "1"
          else
            return "0"
          end
        end
      else
        return ""
      end
  end,
}
igmpproxy_interface_.entries = entriesInterfaces
register(igmpproxy_interface_)

