local tinsert, format = table.insert, string.format
local logger = require("transformer.logger")
local log = logger.new("mmpbx.device.stats", 2)

local conn = mapper("ubus").connect()

local function nilToEmptyString(st)
    if st == nil then
        return ""
    else
        return tostring(st)
    end
end

local mmpbx_device_stats = {
    objectType = {
    name = "rpc.mmpbx.device.@.stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    incomingCallsReceived = {
            access = "readOnly",
            type = "string",
        },
    incomingCallsAnswered = {
        access = "readOnly",
            type = "string",
    },
    incomingCallsConnected = {
            access = "readOnly",
            type = "string",
        },
        incomingCallsFailed = {
            access = "readOnly",
            type = "string",
        },
        outgoingCallsAttempted = {
            access = "readOnly",
            type = "string",
        },
        outgoingCallsAnswered = {
            access = "readOnly",
            type = "string",
        },
        outgoingCallsConnected = {
            access = "readOnly",
            type = "string",
        },
        outgoingCallsFailed = {
            access = "readOnly",
            type = "string",
        },
        totalCallTime = {
            access = "readOnly",
            type = "string",
        },
        totalCallCount = {
            access = "readOnly",
            type = "string",
        },
    device = {
            access = "readOnly",
            type = "string",
        },
    }
  }
}

local function entriesStats ()
    local content, entries = {}, {}
    content = conn:call("mmpbx.device.stats", "get", {} )
    if content then
        for name, _ in pairs (content) do
            entries[#entries+1] = name
        end
    end
    return entries
end

local function get (mapping, paramname, key)
    local content = {}
    content = conn:call("mmpbx.device.stats", "get", { device = key } )
    if content and content[key] and content[key][paramname] then
        return nilToEmptyString(content[key][paramname])
    end
    return ""
end

local function getAllStats (mapping, key)
    local instance = conn:call("mmpbx.device.stats", "get", { device = key } )
    local data = {}
    if instance then
        for _, v in pairs (instance) do
            if (type(v) == "table") then
                for param, value in pairs (v) do
                    data[param] = nilToEmptyString(value)
                end
            end
        end
        data.device = key
    end
    return data
end


mmpbx_device_stats.entries = entriesStats
mmpbx_device_stats.getall = getAllStats
mmpbx_device_stats.get = {
    incomingCallsReceived = function (mapping, paramname, key)
    return (get (mapping, paramname, key))
    end,
    incomingCallsAnswered = function (mapping, paramname, key)
    return (get (mapping, paramname, key))
    end,
    incomingCallsConnected = function (mapping, paramname, key)
        return (get (mapping, paramname, key))
    end,
    incomingCallsFailed = function (mapping, paramname, key)
        return (get (mapping, paramname, key))
    end,
    outgoingCallsAttempted = function (mapping, paramname, key)
        return (get (mapping, paramname, key))
    end,
    outgoingCallsAnswered = function (mapping, paramname, key)
        return (get (mapping, paramname, key))
    end,
    outgoingCallsConnected = function (mapping, paramname, key)
        return (get (mapping, paramname, key))
    end,
    outgoingCallsFailed = function (mapping, paramname, key)
        return (get (mapping, paramname, key))
    end,
    totalCallTime = function (mapping, paramname, key)
        return (get (mapping, paramname, key))
    end,
    totalCallCount = function (mapping, paramname, key)
        return (get (mapping, paramname, key))
    end,
    device = function (mapping, paramname, key)
        local content = {}
        content = conn:call("mmpbx.device.stats", "get", { device = key } )
        if content then
            return nilToEmptyString(key)
        end
        return ""
    end,
}

register (mmpbx_device_stats)
