local logger = require("transformer.logger")
local log = logger.new("mmpbxbrcmdect", 2)


local mmpbxbrcmdect_ = {
  objectType = {
    name = "rpc.mmpbxbrcmdect.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
        paging = {
            access = "readWrite",
            type = "string",
        },
        registration = {
            access = "readWrite",
            type = "string",
        },
    },
  }
}

local mmpbxbrcmdect_reg_ = {
  objectType = {
    name = "rpc.mmpbxbrcmdect.registration.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
        open = {
            access = "readOnly",
            type = "string",
        },
    	clear = {
    	    access = "readWrite",
	    type = "string",
    	},
    },
  }
}

local mmpbxbrcmdect_paging_ = {
  objectType = {
    name = "rpc.mmpbxbrcmdect.paging.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
        alerting = {
            access = "readOnly",
            type = "string",
        },
    },
  }
}

local conn = mapper("ubus").connect()

local function nilToEmptyString(st)
    if st == nil then
       return ""
    else
       return tostring(st)
    end
end


local function set(mapping, paramName, paramValue, key)
    local result

    --log:error ("[mmpbx.dect.map] Check set function ParamName: " .. paramName .. " Value: " .. paramValue)

    if paramName == "registration" then
        result = conn:call("mmpbxbrcmdect.registration", paramValue, {})
    end
    if paramName == "paging" then
        result = conn:call("mmpbxbrcmdect.paging", paramValue, {})
    end
    return result
end

local function get(mapping, paramName, key)
    local result = "0"
    local state = nil

    if paramName == "registration" then
	state = conn:call("mmpbxbrcmdect.registration", "state", { })
    end
    if paramName == "paging" then
        state = conn:call("mmpbxbrcmdect.paging", "state", { })
    end

    if state ~= nil then
	if nilToEmptyString(state[paramName]) == "true" then
	    result = "1"
	end
    end
    return result
end

local function get_dect_status(mapping, paramName, key)
    local result = "0"
    local state = nil

    --log:error ("[mmpbx.dect.map] Check get_dect_status function ParamName: " .. paramName )

    if paramName == "open" then -- Retrieve the registration status
	state = conn:call("mmpbxbrcmdect.registration", "state", { })
	--log:error ("[mmpbx.dect.map]] Check get_dect_status open result value : " .. nilToEmptyString(state[paramName])
    end
    if paramName == "alerting" then -- Retrieve the paging status
	state = conn:call("mmpbxbrcmdect.paging", "state", { })
	--log:error ("[mmpbx.dect.map] Check get_dect_status paging result value : " .. nilToEmptyString(state[paramName])
    end

    if state ~= nil then
	if nilToEmptyString(state[paramName]) == "true" then
	    result = "1"
	end
    end
    return result
end

local function set_handset(mapping, paramName, paramValue, key)
    local result

    --log:error ("[mmpbx.dect.map] Check set_handset function ParamName: " .. paramName .. " Value: " .. paramValue)

    if paramName == "clear" then -- Retrieve the registration status
        if paramValue ~= "all" then 
	    result = conn:call("mmpbxbrcmdect.registration", "clear", { device = paramValue })
	else
	    result = conn:call("mmpbxbrcmdect.registration", "clear", { })
	end
    end
    return result
end


mmpbxbrcmdect_.set = set
mmpbxbrcmdect_.get = get
mmpbxbrcmdect_reg_.set = set_handset
mmpbxbrcmdect_reg_.get = get_dect_status
mmpbxbrcmdect_paging_.get = get_dect_status

register(mmpbxbrcmdect_)
register(mmpbxbrcmdect_reg_)
register(mmpbxbrcmdect_paging_)


