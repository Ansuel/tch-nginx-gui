local uci_helper = mapper("ucihelper")
local open, popen, strmatch = io.open, io.popen, string.match
local find, lower = string.find, string.lower

local ddns_binding = {config = "ddns", sectionname = "service"}

local function getDDnsStatus(nameService)
	local state = "No error received from server"

	--special process for namecheap,zoneedit,easydns,free
    local errFile = "/var/run/ddns/" .. nameService .. ".err"
    local datFile = "/var/run/ddns/" .. nameService .. ".dat"
    local logFile = "/var/log/ddns/" .. nameService .. ".log"
    local cmdResult = nil
    local handle = open(errFile)
    if handle then
        local cmdResult = handle:read("*a")
        handle:close()
        if cmdResult and "" ~= cmdResult then
            return cmdResult
        else
            --special process for namecheap,zoneedit,easydns,free
            local errString = "cat " .. datFile .. "| grep "
            local errInfo = {errString .. '".*401"',
                             errString .. '".*TEXT=" | sed -n "s/.*TEXT=\\"\\(.*\\)\\" ZONE.*/\\1/gp"',
                             errString .. '".*Err1" | sed -n "s/.*Err1>\\(.*\\)<\\/Err1.*/\\1/gp"',
                             errString .. '"^.*fail"',
                             errString .. '".*nohost"',
                             errString .. '".*badauth"',
                             errString .. '".*200 OK"',
                             errString .. '".*ERR Not authenticated"',
                             errString .. '".*HTTP Basic: Access denied"',
                             errString .. '".*500"',
                             errString .. '".*notify NG"',
                             errString .. '".*good"',
                             errString .. '".*nochg"',
                             errString .. '".*The password you supplied is not valid"',
                            }
            for _, v in ipairs(errInfo) do
                handle = popen(v)
                if handle then
                    cmdResult = handle:read("*a")
                    handle:close()
                    if "" ~= cmdResult then
                        if strmatch(v, "401") or strmatch(v, "500") or strmatch(v, "notify NG") or strmatch(v, "The password you supplied is not valid") then
                            return "Failed to Authenticate"
                        end

                        if strmatch(v, "good") or strmatch(v, "nochg") or strmatch(v, "200") then
                            return "Domain's IP updated"
                        end

                        return cmdResult
                    end
                end
            end
        end

        -- Read the log file
        local file
        local lines = {}
        local checkIntervalFound = false
        local detectRegisteredIPFound = false
        local updateSuccessful  = false

        file = open(logFile)
        if file then
          for line in file:lines() do
            lines[#lines+1] = line
          end
          file:close()

          -- check the log from the last line to the last ddns start
          for k = #lines, 1, -1 do
            local line = lines[k]

            -- ddns starts
            if find(line, "last update:") then
              break
            end

            if find(lower(line), "error") or find(lower(line), "fail") then
              break
            end

            if find(line, "Update successful") or find(line, "Forced update successful") then
              updateSuccessful = true
              break
            end

            if strmatch(line, ".+Waiting %d+ seconds %(Check Interval%)") then
              checkIntervalFound = true
            end
            if find(line, "Detect registered/public IP") then
              detectRegisteredIPFound = true
            end

            if checkIntervalFound and detectRegisteredIPFound then
              -- The registered IP equals to the local IP.
              break
            end
          end

          if updateSuccessful or (checkIntervalFound and detectRegisteredIPFound) then
            -- indicate the domain's IP updated
            state = "Domain's IP updated"
          end
        end
    end
	
	return state
end

local loadServices
do
  local ddns_binding = {config = "ddns", sectionname = "service"}
  loadServices = function()
    local serviceNames = {}
    local services = {}
    uci_helper.foreach_on_uci(ddns_binding, function(s)
      local name = s['.name']
      serviceNames[#serviceNames + 1] = name
      services[name] = s
    end)
    return serviceNames, services
  end
end

local function ddnsActiveServices()
  local _, services = loadServices()
  local active = {}
  for name, service in pairs(services) do
    if service.enabled=="1" and service.domain~="" then
      active[#active+1] = resolve("uci.ddns.service.@.", name)
    end
  end
  return table.concat(active, " ")
end

local ddns = {
  objectType = {
    name = 'rpc.ddns.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ActiveServices = {
        access = "readOnly",
        type = "string",
        description = "a list of references to active services"
      }
    }
  }
}

ddns.get = {
  ActiveServices = ddnsActiveServices 
}

register(ddns)

local ddns_service = {
  objectType = {
    name = 'rpc.ddns.service.@.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = math.huge,
    parameters = {
      status = {
        access = "readOnly",
        type = "string"
      }
    }
  }
}

local function ddnsEntries()
  local entries = {}
  local _, services = loadServices()
  for name, service in pairs(services) do
    if service.enabled=="1" and service.domain~="" then
      entries[#entries+1] = name
    end
  end
  return entries
end

local function getall(mapping, key)

	local store = {}
	
	store["status"] = getDDnsStatus(key)

	return store
end

local function get(mapping, paramName, key)
  return getall(mapping, key)[paramName]
end

ddns_service.getall = getall
ddns_service.entries = ddnsEntries
ddns_service.get = get

register(ddns_service)
