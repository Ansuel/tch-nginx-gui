local logger = require("transformer.logger")
local log = logger.new("wireless.radio.stats", 2)
local register = register;

local wireless_radio_stats_ = {
  objectType = {
    name = "rpc.wireless.radio.@.stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      tx_packets = { 
          access = "readOnly",
          type = "string",
      },
      tx_unicast_packets = { 
          access = "readOnly",
          type = "string",
      },
      tx_broadcast_packets = { 
          access = "readOnly",
          type = "string",
      },
      tx_multicast_packets = { 
          access = "readOnly",
          type = "string",
      },
      tx_errors = { 
          access = "readOnly",
          type = "string",
      },
      tx_discards = { 
          access = "readOnly",
          type = "string",
      },
      tx_bytes = { 
          access = "readOnly",
          type = "string",
      },
      rx_packets = { 
          access = "readOnly",
          type = "string",
      },
      rx_unicast_packets = { 
          access = "readOnly",
          type = "string",
      },
      rx_broadcast_packets = { 
          access = "readOnly",
          type = "string",
      },
      rx_multicast_packets = { 
          access = "readOnly",
          type = "string",
      },
      rx_errors = { 
          access = "readOnly",
          type = "string",
      },
      rx_discards = { 
          access = "readOnly",
          type = "string",
      },
      rx_bytes = { 
          access = "readOnly",
          type = "string",
      },
    },
  }
}

local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()

local function nilToEmptyString(st)
    if st == nil then
        return ""
    else
        return tostring(st)
    end
end

local function getDataForRadio(radio)
    local result = conn:call("wireless.radio.stats", "get", { name = radio })
    if result == nil then
        log:error("Cannot retrieve radio stats info for radio stats" .. radio)
        return {}
    end
    return result[radio]
end

local function getall(mapping, key)
	local radioData = getDataForRadio(key)
	local sanitizedData = {}
	for k,v in pairs(radioData) do
		sanitizedData[k] = nilToEmptyString(v)
	end
	return sanitizedData
end

local function get(mapping, paramName, key)
	local radioData = getDataForRadio(key)
	return nilToEmptyString(radioData[paramName]);
end


wireless_radio_stats_.getall = getall
wireless_radio_stats_.get = get
register(wireless_radio_stats_)

