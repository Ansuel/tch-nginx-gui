local register = register

local mmpbx_media_ = {
    objectType = {
    name = "rpc.mmpbx.media.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
    }
  }
}

register(mmpbx_media_)

local mmpbx_media_codec_ = {
    objectType = {
    name = "rpc.mmpbx.media.codec.@.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
        payloadType = {
            access = "readOnly",
            type = "unsignedInt",
        },
    }
  }
}

local conn = mapper("ubus").connect()

mmpbx_media_codec_.entries = function()
  local entries = {}
  local result = conn:call("mmpbx.media.codec", "get", {})
  if type(result) == "table" then
    for k in pairs(result) do
    -- While setting value to payload via transformer it should not accept the values from above ubus call except telephone-event.
      if k ~= "telephone-event" then
        entries[#entries + 1] = k
      end
    end
  end
  return entries
end

mmpbx_media_codec_.get = function(mapping, param, key)
  local payload = conn:call("mmpbx.media.codec", "get", {})
  if payload and payload[key] then
    return tostring(payload[key].payloadType or 0)
  end
  return "0"
end

register(mmpbx_media_codec_)

