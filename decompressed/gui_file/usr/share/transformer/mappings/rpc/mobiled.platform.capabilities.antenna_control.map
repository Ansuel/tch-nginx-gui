local obj = {
	objectType = {
		name = 'rpc.mobiled.platform.capabilities.antenna_control.@.',
		access = 'readOnly',
		minEntries = 1,
		maxEntries = math.huge,
		numEntriesParameter = "AntennaControlNumberOfEntries",
		parameters = {
			detector_type = {
				access = "readOnly",
				type = "string"
			},
			name = {
				access = "readOnly",
				type = "string"
			}
		}
	}
}

local conn = mapper("ubus").connect()
if not conn then
	return
end

local helper = require("mobiled.scripthelpers")

local function getall(mapping, key)
	local result = {}
	setmetatable(result, { __index = function() return "" end })
	local id = tonumber(string.match(key, "^antenna_control(%d+)$"))
	local info = helper.getUbusData(conn, "mobiled.platform", "capabilities", {})
	if type(info.antenna_controls) == "table" then
		for i, control in pairs(info.antenna_controls) do
			if i == id then
				return control
			end
		end
	end
	return result
end

local function get(mapping, paramName, key)
	return getall(mapping, key)[paramName]
end

local function antennaControlEntries(mapping)
	local info = helper.getUbusData(conn, "mobiled.platform", "capabilities", {})
	local antennaControls = {}
	if type(info.antenna_controls) == "table" then
		for i in pairs(info.antenna_controls) do
			table.insert(antennaControls, { tostring(i), "antenna_control" .. i })
		end
	end
	return antennaControls
end

obj.getall = getall
obj.get = get
obj.entries = antennaControlEntries

register(obj)
