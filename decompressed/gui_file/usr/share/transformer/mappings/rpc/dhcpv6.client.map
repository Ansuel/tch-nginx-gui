local register = register

--Manually generated

local dhcpv6_ = {
  objectType = {
    name = "rpc.dhcpv6.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {},
  }
}

register(dhcpv6_)

local dhcpv6_client_ = {
  objectType = {
    name = "rpc.dhcpv6.client.@.",
    access = "readOnly",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      RapidCommit = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      RequestPrefixes = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
      DNS = {
        access = "readWrite",
        type = "boolean",
        default = "false",
      },
    },
  }
}

local uciHelper = mapper("ucihelper")
local networkBinding = { config = "network" }
local configChanged

local dhcpOptionMap = {
  RapidCommit = "14",
  RequestPrefixes = "25",
  DNS = "23",
}

dhcpv6_client_.entries = function()
  local dhcpv6ClientEntries = {}
  networkBinding.sectionname = "interface"
  uciHelper.foreach_on_uci(networkBinding, function(s)
    if s["proto"] == "dhcpv6" then
      dhcpv6ClientEntries[#dhcpv6ClientEntries + 1] = s[".name"]
    end
  end)
  return dhcpv6ClientEntries
end

local function getUciParam(key, option)
  networkBinding.sectionname = key
  networkBinding.option = option
  return uciHelper.get_from_uci(networkBinding)
end

local function getParamValues(mapping, param, key)
  local reqOptsString = getUciParam(key, "reqopts")
  local reqOpts = {}
  for option in reqOptsString:gmatch("(%d+)") do
    reqOpts[option] = "1"
  end
  return reqOpts[dhcpOptionMap[param]] or "0"
end

dhcpv6_client_.get = getParamValues

local function setParamValues(mapping, param, value, key)
  local reqOptsString = getUciParam(key, "reqopts")
  local res = {}
  for option in reqOptsString:gmatch("(%d+)") do
    res[#res +1] = option
  end
  local foundPos
  for i, v in ipairs(res) do
    if v == dhcpOptionMap[param] then
      foundPos = i
      break
    end
  end
  if foundPos and value == "0" then
    table.remove(res, foundPos)
  elseif not foundPos and value == "1" then
    res[#res +1] = dhcpOptionMap[param]
  end
  local reqOpts = table.concat(res, " ") or ""
  networkBinding.sectionname = key
  networkBinding.option = "reqopts"
  uciHelper.set_on_uci(networkBinding, reqOpts, commitapply)
  configChanged = true
end

dhcpv6_client_.set = setParamValues

dhcpv6_client_.commit = function()
  if configChanged then
    uciHelper.commit(networkBinding)
  end
  configChanged = false
end

dhcpv6_client_.revert = function()
  if configChanged then
    uciHelper.revert(networkBinding)
  end
  configChanged = false
end

register(dhcpv6_client_)
