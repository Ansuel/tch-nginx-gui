local logger = require("transformer.logger")
local log = logger.new("wireless.ap.wps", 2)
local register = register;

local wireless_ap_wps_ = {
  objectType = {
    name = "rpc.wireless.ap.@.wps.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
        admin_state = {
            access = "readWrite",
            type = "boolean",
        },
        oper_state = {
            access = "readOnly",
            type = "boolean",
        },
        wsc_state = {
            access = "readOnly",
            type = "string",
        },
        ap_setup_locked = {
            access = "readWrite",
            type = "boolean",
        },
        ap_pin = {
            access = "readWrite",
            type = "password",
        },
        session_state = {
            access = "readOnly",
            type = "boolean",
        },
        session_type = {
            access = "readOnly",
            type = "string",
        },
        last_session_state = {
            access = "readOnly",
            type = "string",
        },
        enrollee_pin = {
            access = "readWrite",
            type = "password",
        },
        enrollee_mac_address = {
            access = "readOnly",
            type = "string",
        },
        w7pbc = {
            access = "readOnly",
            type = "string",
        },
        enrollee_pbc = {
           access = "readWrite",
           type = "boolean",
        },
    },
  }
}

local uci_helper = mapper("ucihelper")
local conn = mapper("ubus").connect()

local function nilToEmptyString(st)
    if st == nil then
        return ""
    else
        return tostring(st)
    end
end

local function getDataForAP(ap)
    local result = conn:call("wireless.accesspoint.wps", "get", { name = ap })
    if result == nil then
        log:error("Cannot retrieve wps info for ap " .. ap)
        return {}
    end
    return result[ap]
end

local function getall(mapping, key)
    local apData = getDataForAP(key)
    local sanitizedData = {}
    for k,v in pairs(apData) do
        sanitizedData[k] = nilToEmptyString(v)
    end
    return sanitizedData
end

local function get(mapping, paramName, key)
    local apData = getDataForAP(key)
    return nilToEmptyString(apData[paramName]);
end

local set = {
    enrollee_pin = function(mapping, param, paramValue, key)
        if paramValue ~= nil and paramValue:len() > 0 then
            log:info("Setting WPS enrollee PIN for AP " .. key .. " to " .. paramValue)
            local result = conn:call("wireless.accesspoint.wps", "enrollee_pin", { name = key, value = paramValue })
            return true
        end
    end,
    enrollee_pbc = function(mapping, param, paramValue, key)
      local result
      if paramValue == "1" then
        result = conn:call("wireless.accesspoint.wps", "enrollee_pbc" , { name = key, event = "start" })
      else
        result = conn:call("wireless.accesspoint.wps", "enrollee_pbc" , { name = key, event = "stop" })
      end
      return true
    end,
    admin_state = function(mapping, param, value, key)
         uci_helper.set_on_uci({
            config = "wireless", sectionname = key , option = "wps_state"
        }, value, commitapply)
    end,
    ap_pin = function(mapping, param, value, key)
         uci_helper.set_on_uci({
            config = "wireless", sectionname = key , option = "wps_ap_pin"
        }, value, commitapply)
    end,
    ap_setup_locked = function(mapping, param, value, key)
         uci_helper.set_on_uci({
            config = "wireless", sectionname = key , option = "wps_ap_setup_locked"
        }, value, commitapply)
        return true
    end,
}

wireless_ap_wps_.getall = getall
wireless_ap_wps_.get = get
wireless_ap_wps_.set = set
wireless_ap_wps_.commit = function()
    uci_helper.commit({config = "wireless"})
end
wireless_ap_wps_.revert = function()
    uci_helper.revert({config = "wireless"})
end

register(wireless_ap_wps_)

