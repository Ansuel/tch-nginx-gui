local commitapply = commitapply

-- uci.mobiled.operator
local mobiled_operator_ = {
    objectType = {
        name = "uci.mobiled.operator.@.",
        numEntriesParameter = "numOperators",
        access = "readWrite",
        minEntries = 0,
        maxEntries = math.huge,
        parameters = {
            name = {
                access = "readWrite",
                type = "string"
            },
            mcc = {
                access = "readWrite",
                type = "string"
            },
            mnc = {
                access = "readWrite",
                type = "string"
            },
            plmn = {
                access = "readWrite",
                type = "string"
            }
        }
    }
}

local register, tostring = register, tostring

local uci_helper = mapper("ucihelper")

local operatorsBinding = {
      config="mobiled",
      sectionname="operator",
}

local function entriesMobiledOperators(mapping)
    local operators = {}

    local function cb(t)
        local l = #operators
        operators[l+1] = tostring(l)
    end
    uci_helper.foreach_on_uci(operatorsBinding, cb)
    return operators
end

local function getBindingForIndex(key)
    return {
        config="mobiled",
        sectionname="@operator[" .. key .. "]",
        extended = true,
    }
end

local function addDefaults(key)
    local default_cfg = {}

    local binding = getBindingForIndex(key)
    for param, value in pairs(default_cfg) do
        binding.option = param
        uci_helper.set_on_uci(binding, value, commitapply)
    end
end

local function addMobiledOperators(mapping)
    local result = uci_helper.add_on_uci(operatorsBinding, commitapply)
    if not result then
        return nil, "No object could be added for this multi instance object"
    end
    uci_helper.commit(operatorsBinding)
    local items = entriesMobiledOperators(mapping)
    local operator = tostring(#items-1)
    addDefaults(operator)
    return operator
end

local function deleteMobiledOperators(mapping, key)
    local binding = getBindingForIndex(key)
    uci_helper.delete_on_uci(binding, commitapply)
    uci_helper.commit(binding)
    return true
end

local function getallFromUCI(key)
    local binding = getBindingForIndex(key)
    local result = uci_helper.getall_from_uci(binding)
    return result
end

local function getFromUCI(key, param)
    local binding = getBindingForIndex(key)
    binding.option = param
    local result = uci_helper.get_from_uci(binding)
    return result
end

local function setOnUCI(key, param, value, nocommit)
    local binding = getBindingForIndex(key)
    binding.option = param
    uci_helper.set_on_uci(binding, value, commitapply)
    if not nocommit then
        uci_helper.commit(binding)
    end
end

local function getallMobiledOperators(mapping, key)
    local result = getallFromUCI(key)
    result['index'] = key
    return result
end

local function get(mapping, paramName, key)
    if paramName == "plmn" then
        local mcc = getFromUCI(key, "mcc")
        local mnc = getFromUCI(key, "mnc")
        return mcc .. mnc
    end
    return getFromUCI(key, paramName)
end

local function set(mapping, paramName, paramValue, key)
    if paramName == "plmn" and (#paramValue == 5 or #paramValue == 6) then
        local mcc = string.sub(paramValue, 1, 3)
        local mnc = string.sub(paramValue, 4)
        setOnUCI(key, "mcc", mcc)
        return setOnUCI(key, "mnc", mnc)
    end
    return setOnUCI(key, paramName, paramValue)
end

mobiled_operator_.getall = getallMobiledOperators
mobiled_operator_.get = get
mobiled_operator_.set = set
mobiled_operator_.add = addMobiledOperators
mobiled_operator_.delete = deleteMobiledOperators
mobiled_operator_.entries = entriesMobiledOperators
register(mobiled_operator_)
