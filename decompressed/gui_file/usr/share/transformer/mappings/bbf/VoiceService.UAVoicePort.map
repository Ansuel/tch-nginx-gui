local lfs = require("lfs")

if lfs.attributes("/etc/config/mmpbx", "mode") ~= "file" then
  return
end

local format, match, tostring, tonumber = string.format, string.match, tostring, tonumber
local tconcat = table.concat
local uci_helper = mapper("ucihelper")
local binding = {config = "mmpbx"}
local transactions = {}

local Multi_Services_VoiceService_i_X_000E50_UAMap_i_ = {
    objectType = {
        name = "#ROOT.Services.VoiceService.{i}.X_000E50_UAMap.{i}.",
        access = "readOnly",
        minEntries = 0,
        maxEntries = math.huge,
        numEntriesParameter = "X_000E50_UAMapNumberOfEntries",
        parameters = {
            FromUA = {
                access = "readWrite",
                type = "string",
            },
            ToVoicePort = {
                access = "readWrite",
                type = "string",
            },
        }
    }
}

local function port_commit()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
    transactions = {}
end

local function port_revert()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
    transactions = {}
end

local content_incoming = {}
local device_maps = {}

Multi_Services_VoiceService_i_X_000E50_UAMap_i_.entries = function(mapping, parentkey)
    local entries = {}
    if parentkey == "SIPUA" then
        content_incoming = {}
        device_maps = {}
        binding.sectionname = "incoming_map"
        local flag = false
        uci_helper.foreach_on_uci(binding, function(s)
            -- Only get sip profile
            if s.profile:match("^sip_") then
                if not s._key then
                    s._key = uci_helper.generate_key_on_uci({ config = "mmpbx", sectionname = s[".name"] })
                    flag = true
                end
                if not device_maps[s._key] then
                    device_maps[s._key] = {}
                end
                if type(s.device) == 'table' then
                    for k,v in ipairs(s.device) do
                        entries[#entries + 1] = format("%s|%s", s._key, k)
                        device_maps[s._key][k] = v
                    end
                end
                content_incoming[s._key] = s
            end
        end)
        if flag then
            uci_helper.commit_keys(binding)
        end
    end
    return entries
end

Multi_Services_VoiceService_i_X_000E50_UAMap_i_.get = {
    FromUA = function(mapping, paramname, key)
        local k, i = key:match("^(.*)|(.*)$")
        local profile = content_incoming[k].profile
        local path = mapping.objectType.name:match("^([^%.]*)%.")..'.Services.VoiceService.{i}.VoiceProfile.{i}.Line.{i}.'
        return resolve(path, profile) or ""
    end,
    ToVoicePort = function(mapping, paramname, key)
        local k, i = key:match("^(.*)|(.*)$")
        local device = device_maps[k][tonumber(i)]
        local path = mapping.objectType.name:match("^([^%.]*)%.")..'.Services.VoiceService.{i}.PhyInterface.{i}.'
        return resolve(path, device) or ""
    end,
}

Multi_Services_VoiceService_i_X_000E50_UAMap_i_.set = {
    FromUA = function(mapping, paramname, paramvalue, key)
        if mapping.objectType.name:match("^([^%.]*)%.") ~= paramvalue:match("^([^%.]*)%.") or not paramvalue:match("%.Services%.VoiceService%.%d+%.VoiceProfile%.%d+%.Line%.%d+") then
            return nil, "The parameter value format is invalid"
        end
        local k, i = key:match("^(.*)|(.*)$")
        local name = content_incoming[k]['.name']
        local value = tokey(paramvalue)
        if value then
            binding.sectionname = name
            binding.option = "profile"
            uci_helper.set_on_uci(binding, value, commitapply)
            transactions[binding.config] = true
            return true
        else
            return nil, "The value is invalid"
        end
    end,
    ToVoicePort = function(mapping, paramname, paramvalue, key)
        if mapping.objectType.name:match("^([^%.]*)%.") ~= paramvalue:match("^([^%.]*)%.") or not paramvalue:match("%.Services%.VoiceService%.%d+%.PhyInterface%.%d+") then
            return nil, "The parameter value format is invalid"
        end
        local k, i = key:match("^(.*)|(.*)$")
        local value = tokey(paramvalue)
        if value then
            local name = content_incoming[k]['.name']
            local devices = content_incoming[k]["device"]
            local device = device_maps[k][tonumber(i)]
            if tconcat(devices, " "):match(value) then
                return nil, "The port has existed"
            end

            for n,v in ipairs(devices) do
                if v == device then
                    devices[n] = value
                    break
                end
            end
            binding.sectionname = name
            binding.option = "device"
            uci_helper.set_on_uci(binding, devices, commitapply)
            transactions[binding.config] = true
            return true
        else
            return nil, "The value is invalid"
        end
    end,
}

Multi_Services_VoiceService_i_X_000E50_UAMap_i_.commit = port_commit
Multi_Services_VoiceService_i_X_000E50_UAMap_i_.revert = port_revert

local duplicator = mapper("multiroot").duplicate
local duplicates = duplicator(Multi_Services_VoiceService_i_X_000E50_UAMap_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end

local Multi_Services_VoiceService_i_X_000E50_VoicePortMap_i_ = {
    objectType = {
        name = "#ROOT.Services.VoiceService.{i}.X_000E50_VoicePortMap.{i}.",
        access = "readOnly",
        minEntries = 0,
        maxEntries = math.huge,
        numEntriesParameter = "X_000E50_VoicePortMapNumberOfEntries",
        parameters = {
            ToUA = {
                access = "readWrite",
                type = "string",
            },
            FromVoicePort = {
                access = "readWrite",
                type = "string",
            },
            Priority = {
                access = "readWrite",
                type = "unsignedInt",
            },
        }
    }
}

local content_outgoing = {}
local profile_maps = {}

Multi_Services_VoiceService_i_X_000E50_VoicePortMap_i_.entries = function(mapping, parentkey)
    local entries = {}
    if parentkey == "SIPUA" then
        content_outgoing = {}
        profile_maps = {}
        binding.sectionname = "outgoing_map"
        local flag = false
        uci_helper.foreach_on_uci(binding, function(s)
            if not s._key then
                s._key = uci_helper.generate_key_on_uci({ config = "mmpbx", sectionname = s[".name"] })
                flag = true
            end
            if not profile_maps[s._key] then
                profile_maps[s._key] = {}
            end
            if type(s.profile) == 'table' then
                for k,v in ipairs(s.profile) do
                    -- Only get sip profile
                    if (v:match("^sip_")) then
                        entries[#entries + 1] = format("%s|%s", s._key, k)
                        profile_maps[s._key][k] = {}
                        profile_maps[s._key][k]["profile"] = v
                        profile_maps[s._key][k]["priority"] = s.priority[k]
                    end
                end
            end
            content_outgoing[s._key] = s
        end)
        if flag then
            uci_helper.commit_keys(binding)
        end
    end
    return entries
end

Multi_Services_VoiceService_i_X_000E50_VoicePortMap_i_.get = {
    ToUA = function(mapping, paramname, key)
        local k, i = key:match("^(.*)|(.*)$")
        local profile = profile_maps[k][tonumber(i)]["profile"]
        local path = mapping.objectType.name:match("^([^%.]*)%.")..'.Services.VoiceService.{i}.VoiceProfile.{i}.Line.{i}.'
        return resolve(path, profile) or ""
    end,
    FromVoicePort = function(mapping, paramname, key)
        local k, i = key:match("^(.*)|(.*)$")
        local device = content_outgoing[k].device
        local path = mapping.objectType.name:match("^([^%.]*)%.")..'.Services.VoiceService.{i}.PhyInterface.{i}.'
        return resolve(path, device) or ""
    end,
    Priority = function(mapping, paramname, key)
        local k, i = key:match("^(.*)|(.*)$")
        return profile_maps[k][tonumber(i)]["priority"] or ""
    end,
}

Multi_Services_VoiceService_i_X_000E50_VoicePortMap_i_.set = {
    ToUA = function(mapping, paramname, paramvalue, key)
        if mapping.objectType.name:match("^([^%.]*)%.") ~= paramvalue:match("^([^%.]*)%.") or not paramvalue:match("%.Services%.VoiceService%.%d+%.VoiceProfile%.%d+%.Line%.%d+") then
            return nil, "The parameter value format is invalid"
        end
        local k, i = key:match("^(.*)|(.*)$")
        local value = tokey(paramvalue)
        if value then
            local name = content_outgoing[k]['.name']
            local profiles = content_outgoing[k]["profile"]
            local profile = profile_maps[k][tonumber(i)]["profile"]
            if tconcat(profiles, " "):match(value) then
                return nil, "The profile has existed"
            end
            for n,v in ipairs(profiles) do
                if v == profile then
                    profiles[n] = value
                    break
                end
            end
            binding.sectionname = name
            binding.option = "profile"
            uci_helper.set_on_uci(binding, profiles, commitapply)
            transactions[binding.config] = true
            return true
        else
            return nil, "The value is invalid"
        end
    end,
    FromVoicePort = function(mapping, paramname, paramvalue, key)
        if mapping.objectType.name:match("^([^%.]*)%.") ~= paramvalue:match("^([^%.]*)%.") or not paramvalue:match("%.Services%.VoiceService%.%d+%.PhyInterface%.%d+") then
            return nil, "The parameter value format is invalid"
        end
        local k, i = key:match("^(.*)|(.*)$")
        local name = content_outgoing[k]['.name']
        local value = tokey(paramvalue)
        if value then
            binding.sectionname = name
            binding.option = "device"
            uci_helper.set_on_uci(binding, value, commitapply)
            transactions[binding.config] = true
            return true
        else
            return nil, "The value is invalid"
        end
    end,
    Priority = function(mapping, paramname, paramvalue, key)
        local k, i = key:match("^(.*)|(.*)$")
        local name = content_outgoing[k]['.name']
        local prioritys = content_outgoing[k]["priority"]
        local priority = profile_maps[k][tonumber(i)]["priority"]
        for n,v in ipairs(prioritys) do
            if v == priority then
                prioritys[n] = paramvalue
                break
            end
        end
        binding.sectionname = name
        binding.option = "priority"
        uci_helper.set_on_uci(binding, prioritys, commitapply)
        transactions[binding.config] = true
        return true
    end,
}

Multi_Services_VoiceService_i_X_000E50_VoicePortMap_i_.commit = port_commit
Multi_Services_VoiceService_i_X_000E50_VoicePortMap_i_.revert = port_revert

duplicates = duplicator(Multi_Services_VoiceService_i_X_000E50_VoicePortMap_i_, "#ROOT", {"InternetGatewayDevice", "Device"})
for _, dupli in ipairs(duplicates) do
  register(dupli)
end
