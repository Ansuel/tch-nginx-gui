#!/bin/sh
#
#
#	 Custom Gui for Technicolor Modem: utility script and modified gui for the Technicolor Modem
#	 								   interface based on OpenWrt
#
#    Copyright (C) 2018  Christian Marangi <ansuelsmth@gmail.com>
#
#    This file is part of Custom Gui for Technicolor Modem.
#    
#    Custom Gui for Technicolor Modem is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#    
#    Custom Gui for Technicolor Modem is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with Custom Gui for Technicolor Modem.  If not, see <http://www.gnu.org/licenses/>.
#
#

STABLE_VERSION="stable.version"
DEV_VERSION="latest.version"
PREVIEW_VERSION="preview.version"
CURRENT_VERSION=$(echo "$(uci get modgui.gui.gui_version)" | cut -d'-' -f1)
BASE_DIR="https://raw.githubusercontent.com/Ansuel/gui-dev-build-auto/master"

############TRANSFORMER UTILITY##################
set_transformer() {
	cmd="require('datamodel').set('$1','$2')"
	lua -e "$cmd"
}
#################################################

set_transformer "rpc.system.modgui.executeCommand.state" "Checking"

connectivity="yes"
if ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then
  connectivity="yes"
else
  connectivity="no"
fi

if [ "$1" ]; then
	if [ "$1" == "Schedule" ]; then
		RANDOM=$(awk -v min=1 -v max=3600 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
		sleep "$RANDOM"
	fi
fi

normalize() {
	normalized_version=$1
	if [ "$( echo "$1" | grep -E '\.[0-9]\.' )" ]; then
		normalized_version="$( echo "$1" | sed 's|\.\([0-9]\.\)|.0\1|g' )"
	fi
	if [ "$( echo "$normalized_version" | tail -c 3 | grep "\." )" ]; then
		normalized_version="$( echo "$normalized_version" | sed 's|\(\.[0-9][0-9]\.\)\([0-9]\)|\10\2|g' )"
	fi
	
	echo "$normalized_version"
}

enum() {
	echo "$(echo "$1" | sed -e 's/\.//g')"
}

if [ $connectivity == "yes" ]; then
	if [ ! "$(uci get -q modgui.gui.update_branch)" ] || [ "$(uci get modgui.gui.update_branch)" == "stable" ]; then
		update_branch="stable"
		version_link=$BASE_DIR/$STABLE_VERSION
	elif [ "$(uci get modgui.gui.update_branch)" == "preview" ]; then
		update_branch="preview"
		version_link=$BASE_DIR/$PREVIEW_VERSION
	else 
		update_branch="dev"
		version_link=$BASE_DIR/$DEV_VERSION
	fi
	newer_stable=0

    logger -s -t "CheckVer Script" "Installed version: $CURRENT_VERSION checking update on $update_branch branch..."
	new_version="$(curl -k -s "$version_link")"
	new_version_norm="$(normalize "$new_version")"

    logger -s -t "CheckVer Script" "Online version: $new_version"

    if [ "$update_branch" == "dev" ] || [ "$update_branch" == "preview" ]; then #just makes sure there is no newer stable
        stable_version_link=$BASE_DIR/$STABLE_VERSION
        stable_version="$(curl -k -s "$stable_version_link")"

        stable_version_norm="$(normalize "$stable_version")"

        logger -s -t "CheckVer Script" "Online stable version: $stable_version_norm"

        if [ "$( enum "$stable_version_norm" )" -gt "$( enum "$new_version_norm" )" ]; then
            logger -s -t "CheckVer Script" "Selecting stable version as it's newer than dev!"
            new_version="$stable_version STABLE"
            newer_stable=1 #This could happen if the branch is dev and a stable version is installed.
        fi
    fi

    current_version_norm="$(normalize "$CURRENT_VERSION")"

    if [ "$( enum "$new_version_norm" )" -gt "$( enum "$current_version_norm" )" ] || [ "$newer_stable" -eq 1 ]; then
        logger -s -t "CheckVer Script" "Online version selected: $new_version"
        logger -s -t "CheckVer Script" "Setting outdate version bit!"
        uci set modgui.gui.outdated_ver=1
        uci set modgui.gui.new_ver="$new_version"
	      sleep 1 #needed to avoid setting Complete status too fast
    else
        logger -s -t "CheckVer Script" "No new version detected."
        uci set modgui.gui.outdated_ver=0
        uci set modgui.gui.new_ver="Unknown"
    fi
	uci commit env
else
    logger -s -t "CheckVer Script" "No connection detected!"
fi
