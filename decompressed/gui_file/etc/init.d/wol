#!/bin/sh /etc/rc.common

START=70
USE_PROCD=1

start_service() {
    logger -t wol "Starting WOL"
    local enabled
    local dest_ip
    local dest_intf
    local src_intf
    local src_dport
	local dest_port

    . /lib/functions/network.sh
    config_load wol
    config_get_bool enabled config enabled 0
    [ $enabled -eq 0 ] && return 0
    config_get dest_ip config dest_ip
    config_get src_dport config src_dport
	config_get dest_port config dest_port 9
    config_get dest_intf config dest_intf "lan"
    config_get src_intf config src_intf "wan"

    if [ -n "$dest_ip" -a -n "$dest_intf" ]; then
        # Add route entry
        ip route add ${dest_ip}/32 dev $dest_intf
        # Add a static ARP spoofing entry
        local count="0"
        while [ $count -lt 20 ]; do
            if [ -z $(ip neigh show to $dest_ip dev $dest_intf | grep 'FAILED') ] ; then
              break
            fi
            sleep 1
            count=$(( $count + 1 ))
        done
        ip neigh add $dest_ip lladdr ff:ff:ff:ff:ff:ff nud permanent dev $dest_intf
		# Add port forwarding
		uci set firewall.WakeOnWan=redirect
		uci set firewall.WakeOnWan.family=ipv4
		uci set firewall.WakeOnWan.dest_ip=$dest_ip
		# Hardcode lan interface for lan packet
		uci set firewall.WakeOnWan.dest=lan
		uci set firewall.WakeOnWan.src=$src_intf
		uci set firewall.WakeOnWan.target=DNAT
		uci set firewall.WakeOnWan.src_dport=$src_dport
		uci set firewall.WakeOnWan.proto=udp
		uci set firewall.WakeOnWan.dest_port=$dest_port
		uci commit firewall
    fi

    /etc/init.d/firewall restart
}

stop_service() {
    logger -t wol "Stopping WOL"
    local dest_ip
    local dest_intf
    local src_intf
    local src_dport

    . /lib/functions/network.sh
    config_load wol
    config_get dest_ip config dest_ip
    config_get src_dport config src_dport
    config_get dest_intf config dest_intf "lan"
    config_get src_intf config src_intf "wan"

    if [ -n "$dest_ip" -a -n "$dest_intf" ]; then
        # Delete route entry
        ip route del ${dest_ip}/32 dev $dest_intf
        # Delete a static ARP spoofing entry
        ip neigh del $dest_ip lladdr ff:ff:ff:ff:ff:ff nud permanent dev $dest_intf
	# Delete port forwarding
	if [ $(uci get -q firewall.WakeOnWan) ]; then
		uci delete firewall.WakeOnWan
	fi
	uci commit firewall
    fi

    /etc/init.d/firewall reload
}

validate_section_wol()
{
    uci_validate_section wol wol "${1}" \
        'enabled:bool:1' \
        'src_intf:string' \
        'src_dport:or(port, portrange)' \
		'dest_dport:or(port, portrange)' \
        'dest_intf:string' \
        'dest_ip:cidr'
}

service_triggers()
{
    procd_add_reload_trigger wol
    procd_open_validate
    validate_section_wol
    procd_close_validate
}