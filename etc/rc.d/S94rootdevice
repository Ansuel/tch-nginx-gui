#!/bin/ash /etc/rc.common

START=94
EXTRA_COMMANDS="force"
EXTRA_HELP="        force   Force root process even when root flag is already set"

local rooted
force=0
version_gui=7.1.8

logo_project() {
cat << EOF > /dev/console

 █████╗ ███╗   ██╗███████╗██╗   ██╗███████╗██╗     
██╔══██╗████╗  ██║██╔════╝██║   ██║██╔════╝██║     
███████║██╔██╗ ██║███████╗██║   ██║█████╗  ██║     
██╔══██║██║╚██╗██║╚════██║██║   ██║██╔══╝  ██║     
██║  ██║██║ ╚████║███████║╚██████╔╝███████╗███████╗
╚═╝  ╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚══════╝╚══════╝
(Modified Gui RootScript)                  (Christo)

EOF

logger << EOF

                                     _ 
     /\  (Modified Gui RootScript)  | | 
    /  \    _ __   ___  _   _   ___ | |
   / /\ \  | '_ \ / __|| | | | / _ \| |
  / ____ \ | | | |\__ \| |_| ||  __/| |
 /_/    \_\|_| |_||___/ \__,_| \___||_|
                                       
                             (Christo)  
EOF
}

check_root() {
	
	config_load "system"
	
	config_get_bool rooted config rooted 0
	
cat << EOF > /dev/console
 === IMPORTANT =======================================
  Checking root...
EOF
}

force() {
	force=1
	boot
}

add_ipv6() {
	uci set network.wan_ipv6=interface
	uci set network.wan_ipv6.auto='0'
	uci set network.wan_ipv6.proto='pppoe'
	uci set network.wan_ipv6.demand='0'
	uci set network.wan_ipv6.password='IPV6@alice6'
	uci set network.wan_ipv6.macaddr=$(uci -q get network.wan.macaddr)
	uci set network.wan_ipv6.ipv6='1'
	uci set network.wan_ipv6.peerdns='1'
	uci set network.wan_ipv6.keepalive_adaptive='0'
	uci set network.wan_ipv6.dns_metric='0'
	uci set network.wan_ipv6.ifname='wanptm0'
	uci set network.wan_ipv6.username=$(uci -q get env.var.serial)-$(uci -q get env.var.oui)@alice6.it
	uci set network.wan_ipv6.metric='10'
	uci set network.wan6.ifname='@wan_ipv6'
}

add_ipoe() {
	uci set network.ipoe=interface
	uci set network.ipoe.proto='dhcp'
	uci set network.ipoe.metric='1'
	uci set network.ipoe.reqopts='1 3 6 43 51 58 59'
	uci set network.ipoe.release='1'
	uci set network.ipoe.neighreachabletime='1200000'
	uci set network.ipoe.neighgcstaletime='2400'
	uci set network.ipoe.ipv6='1'
}

remove_default_dns() {
	uci -q del network.loopback.dns
	uci -q del network.loopback.dns_metric
}

add_ppp_mgmt() {
	uci set env.var.ppp_mgmt=$(uci -q get env.var.serial)-$(uci -q get env.var.oui)@00000.aliceres.mgmt
}

puryfy_wan_interface() { #creano problemi di dns per chissa'  quale diavolo di motivo... Ma l'utilitÃ  di sta roba eh telecom ? 
	uci -q del network.wan.keepalive
	uci -q del network.wan.graceful_restart
	uci -q del network.wan_ipv6.keepalive
	uci -q del network.wan_ipv6.graceful_restart
}

fix_dns_dhcp_bug() {
	uci set dhcp.odhcpd.maindhcp="0"
	if [ $(uci get -q dhcp.odhcpd.maindhcp) = "1" ]; then
		/etc/init.d/odhcpd stop
		/etc/init.d/odhcpd disable
	fi
}

purify_from_tim() {
	uci -q del env.var.ppp_mgmt
	uci -q del network.wan_ipv6
	uci -q del dhcp.dnsmasq.server
}

encrypted_pass=$(awk -F: '/root/ {print $2 }' /etc/shadow)
default_encrypted_pass='$5liEJpfo7NYE'
saved_encrypted_pass=$(uci -q get env.var.encrypted_pass)

save_root_encrypt_pass() {
	echo "  Storing encrypted password..." > /dev/console
	uci set env.var.encrypted_pass=$encrypted_pass
}

generate_hash_gui() {
	if [ ! $(uci get -q env.var.update_branch) ] ||  [ $(uci get -q env.var.update_branch) == "stable" ]; then
		uci set env.var.update_branch="stable"
		update_branch=""
	else
		uci set env.var.update_branch="dev"
		update_branch="_dev"
	fi
	if [ -f /tmp/GUI$update_branch.tar.bz2 ]; then
		gui_hash=$(md5sum /tmp/GUI$update_branch.tar.bz2 | awk '{ print $1}' )
	else
		if [ -f /root/GUI$update_branch.tar.bz2 ];then
			gui_hash=$(md5sum /root/GUI$update_branch.tar.bz2 | awk '{ print $1}' )
		else
			gui_hash="0"
		fi
	fi
	uci set env.var.new_ver="Unknown"
	uci set env.var.gui_hash=$gui_hash
	uci set env.var.outdated_ver='0'
}

transfer_bank() {
	if [ -d /overlay/bank_1 ]; then
		rm -r /overlay/bank_1
	fi
	mkdir /overlay/bank_1
	cp -a /overlay/bank_2/* /overlay/bank_1/
	if [ -f /overlay/bank_1/etc/init.d/rootdevice ]; then
		#mtd erase /dev/mtd3
		mtd write /dev/mtd4 /dev/mtd3
	fi
	activeversion=$( cat /proc/banktable/activeversion )
	passiveversion=$( cat /proc/banktable/passiveversion )
	
	if [ "$activeversion" == "$passiveversion" ]; then
		echo bank_1 > /proc/banktable/active
		reboot
	fi
}

check_bank() {
	bank_check=$( uci get -q env.var.bank_check )
	bootedbank=$( cat /proc/banktable/booted )
	if [ ! $( uci -q get env.var.bank_check ) ] && [ $bootedbank == "bank_2" ]; then
		transfer_bank
	elif [ $bank_check == "1" ] && [ $bootedbank == "bank_2" ]; then
		transfer_bank
	else
		echo "  Firmware in Bank_1... Not transfering..." > /dev/console
	fi
}

check_gui_ver() {
	if [ "$(uci -q get env.var.gui_version)" != $version_gui ]; then
		uci set env.var.gui_version=$version_gui
	fi
}

check_new_dlnad() {
	if [ -f /etc/init.d/dland ] && [ ! -k /etc/rc.d/S98dlnad ] && [ -f /etc/init.d/minidlna ]; then
		if [ "$(pgrep "minidlna")" ] ; then
			/etc/init.d/minidlna stop
		fi
		/etc/init.d/minidlna disable
		/etc/init.d/dlnad enable
		if [ ! "$(pgrep "dlnad")" ] ; then
			/etc/init.d/dlnad start
		fi
	fi
}

check_upgrade_shit() {
	if [ -f /lib/upgrade/resetgui.sh ]; then
		rm /lib/upgrade/resetgui.sh
		rm /lib/upgrade/transfer_bank1.sh
		rm /lib/upgrade/upgradegui.sh 
		rm /lib/upgrade/checkver.sh 
		rm /lib/upgrade/hardreset.sh
	fi
}

check_isp_config() {
	ppp_user=$(uci -q get network.wan.username)
	if  [ ! "$ppp_user" ]; then
		uci set env.var.isp="Other"
		purify_from_tim
	else
		if echo "$ppp_user" | grep -q "alice" || 
		   echo "$ppp_user" | grep -q "agcombo" || 
		   echo "$ppp_user" | grep -q "unica" || 
		   echo "$ppp_user" | grep -q "aliceres" ||
		   echo "$ppp_user" | grep -q "@00000." ; 
		then
			uci set env.var.isp="TIM"
		else
			uci set env.var.isp="Other"
			purify_from_tim
		fi
	fi
}

create_symlink() {
	if [ -f /bin/busybox_telnet ]; then
		ln -sf ../../bin/busybox_telnet /usr/sbin/telnetd
		/etc/init.d/telnet enable
	fi
	/etc/init.d/wol enable
}

orig_config_gen() {
	if [ ! -f /etc/config/wol ] && [ -f /etc/config/wol_orig ]; then
		mv /etc/config/wol_orig /etc/config/wol
	else
		if [ -f /etc/config/wol_orig ]; then
			rm /etc/config/wol_orig
		fi
	fi
	if [ ! -f /etc/config/dlnad ] && [ -f /etc/config/dlnad_orig ]; then
		mv /etc/config/dlnad_orig /etc/config/dlnad
	else
		if [ -f /etc/config/dlnad_orig ]; then
			rm /etc/config/dlnad_orig
		fi
	fi
	if [ ! -f /etc/config/telnet ] && [ -f /etc/config/telnet_orig ]; then
		mv /etc/config/telnet_orig /etc/config/telnet
	else
		if [ -f /etc/config/telnet_orig ]; then
			rm /etc/config/telnet_orig
		fi
	fi
}

trafficmon_support() {
	if [ -d /root/trafficmon ]; then
		killall trafficmon
		rm -rf /root/trafficmon
	fi
	if [ -f /etc/init.d/trafficmon ] && [ ! -k /etc/rc.d/S99trafficmon ] && [ ! -d /tmp/trafficmon ]; then
		/etc/init.d/trafficmon enable
		/etc/init.d/trafficmon start
	fi
	
}

checkver_cron() {
	if [ -f /etc/crontabs/root ]; then
		if [ ! "$(cat /etc/crontabs/root | grep -q checkver)" ] ; then
			echo " " > /etc/crontabs/root
			echo "0 */2 * * * /usr/share/transformer/scripts/checkver.sh" > /etc/crontabs/root
			/etc/init.d/cron restart
		fi
		if [ -f /etc/crontabs/root_gui ]; then
			rm /etc/crontabs/root_gui
		fi
	else
		if [ -f /etc/crontabs/root_gui ]; then
			mv /etc/crontabs/root_gui /etc/crontabs/root
			/etc/init.d/cron restart
		fi
	fi	
}

restore_original_mapper() {
	
	local orig_dir=/rom/usr/share/transformer/mappings
	local target=/usr/share/transformer/mappings
	
	if [ $(md5sum $orig_dir/device2/Device.map | awk '{print $1}') != $(md5sum $target/device2/Device.map | awk '{print $1}') ]; then
		mkdir /tmp/tmp_bff_file
		cp $target/bbf/VoiceService* /tmp/tmp_bff_file/
		rm -r $target/bbf/*
		rm -r $target/device2/*
		rm -r $target/clash/*
		rm -r $target/igd/*
		cp $orig_dir/bbf/* $target/bbf
		cp $orig_dir/clash/* $target/clash
		cp $orig_dir/device2/* $target/device2
		cp $orig_dir/igd/* $target/igd
		cp /tmp/tmp_bff_file/* $target/bbf
		rm -r /tmp/tmp_bff_file
		logger "Restoring mapper device file"
	fi
}

transformer_lib_check() {
	local orig_dir=/rom/usr
	local target=/usr
	
	if [ $(md5sum $orig_dir/lib/lua/transformer/shared/dhcp.lua | awk '{print $1}') != $(md5sum $target/lib/lua/transformer/shared/dhcp.lua | awk '{print $1}') ]; then
		rm $target/share/transformer/mappings/rpc/*
		rm $target/share/transformer/mappings/uci/*
		rm -r $target/lib/lua/tch/*
		rm -r $target/lib/lua/transformer/*
		cp $orig_dir/share/transformer/mappings/rpc/* $target/share/transformer/mappings/rpc
		cp $orig_dir/share/transformer/mappings/uci/* $target/share/transformer/mappings/uci
		cp $orig_dir/bin/transformer $target/bin/
		cp -r $orig_dir/lib/lua/tch/* $target/lib/lua/tch
		cp -r $orig_dir/lib/lua/transformer/* $target/lib/lua/transformer
		bzcat /root/GUI.tar.bz2 | tar -C / -xvf - #reapply the upgrade as in the gui we store some of this file that we restored
		logger "Restoring transformer lib"
		#/etc/init.d/transformer restart
	fi
}

check_uci_gui_skin() {
	if [ ! $( uci get -q env.var.gui_skin ) ]; then
		uci set env.var.gui_skin="green"
	fi
}

remove_https_check_cwmpd() {
	uci set cwmpd.cwmpd_config.enforce_https='0'
	uci set cwmpd.cwmpd_config.ssl_verifypeer='0'
}

add_telecom_stock_dns() {
	uci set dhcp.dnsmasq.server='151.99.125.1'
}

check_dnsmasq_name() {
	if [ $( uci get -q dhcp.@dnsmasq[0] ) ]; then
		uci rename dhcp.@dnsmasq[0]=@dnsmasq
	fi
}

create_driver_setting() {
	if [ ! $( uci get -q env.var.driver_version ) ]; then
		uci set env.var.driver_version=$(transformer-cli get rpc.xdsl.dslversion | awk '{print $4}')
	fi
}

dropbear_file_check() {
	if [ -f /etc/config/dropbear_new ]; then
		if [ $(uci get -q dropbear.wan.enable) ]; then
			rm /etc/config/dropbear_new
		else
			rm /etc/config/dropbear
			mv /etc/config/dropbear_new /etc/config/dropbear
		fi
	fi
}

check_noip_file() {
	if [ -d /etc/ddns_new ]; then
		if [ -d /etc/ddns ]; then
				rm -r /etc/ddns_new
		else
			mv /etc/ddns_new /etc/ddns
		fi
	fi
}

disable_eco_param() {
	uci set power.ethernet.eee='0'
	uci set power.ethernet.autogreeen='0'
	uci set power.ethernet.ethapd='0'
}

enable_new_upnp() {
	if [ ! -f /etc/init.d/miniupnpd ]; then
		/etc/init.d/miniupnpd-tch stop
		/etc/init.d/miniupnpd-tch disable
		/etc/init.d/miniupnpd enable
		/etc/init.d/miniupnpd start
	fi
}

wifi_fix_24g() {
	wl down
	wl obss_prot set 0
	wl -i wl0 gmode Performance
	wl -i wl0 up
	
}

create_gui_type() {
	if [ ! $( uci get -q env.var.aria2_webui) ]; then
		if [ -d /www/docroot/aria ]; then
			uci set env.var.aria2_webui="1"
		else
			uci set env.var.aria2_webui="0"
		fi
	elif [ $( uci get -q env.var.aria2_webui) == "1" ] &&
	[ ! -d /www/docroot/aria ] && 
	[ -f /usr/share/transformer/scripts/install_aria2.sh ]; then 
		#this restore aria... my bad for this bug...
		/usr/share/transformer/scripts/install_aria2.sh
	fi
	if [ ! $( uci get -q env.var.luci_webui) ]; then
		if [ -d /www_luci ]; then
			uci set env.var.luci_webui="1"
		else
			uci set env.var.luci_webui="0"
		fi
	fi
	if [ ! $( uci get -q env.var.transmission_webui) ]; then
		if [ -d /www/docroot/transmission ]; then
			uci set env.var.transmission_webui="1"
		else
			uci set env.var.transmission_webui="0"
		fi
	fi
	if [ ! $( uci get -q env.var.xupnp_app) ]; then
		if [ -d /usr/share/xupnpd ]; then
			uci set env.var.xupnp_app="1"
		else
			uci set env.var.xupnp_app="0"
		fi
	fi
	if [ ! $( uci get -q env.var.blacklist_app) ]; then
		if [ -d /etc/asterisk ]; then
			uci set env.var.blacklist_app="1"
		else
			uci set env.var.blacklist_app="0"
		fi
	elif [ $( uci get -q env.var.blacklist_app) == "1" ] && 
	[ ! -f /www/docroot/modals/mmpbx-contacts-modal.lp.orig ] &&
	[ -f /usr/share/transformer/scripts/install_blacklist.sh ]; then
		/usr/share/transformer/scripts/install_blacklist.sh
	fi
}

update_dhcp_config() {
	if [ $(uci get -q dhcp.lan.dhcpv4) ]; then
		if [ $(uci get -q dhcp.lan.dhcpv4)  == "1" ]; then
			uci set dhcp.lan.dhcpv4='server'
		fi
		if [ $(uci get -q dhcp.lan.dhcpv4) == "0" ]; then
			uci set dhcp.lan.dhcpv4='disabled'
		fi
	else
		uci set dhcp.lan.dhcpv4='server'
	fi
}

add_new_web_rule() {
	if [ ! $(uci get -q web.applicationsmodal) ]; then
		uci set web.applicationsmodal=rule
		uci set web.applicationsmodal.target='/modals/applications-modal.lp'
		uci add_list web.applicationsmodal.roles='admin' 
		uci add_list web.applicationsmodal.roles='engineer'
		uci add_list web.ruleset_main.rules='applicationsmodal'
	fi
	if [ ! $(uci get -q web.ajaxgatewaytab) ]; then
		uci set web.ajaxgatewaytab=rule
		uci set web.ajaxgatewaytab.target='/ajax/cpuload.lua'
		uci add_list web.ajaxgatewaytab.roles='admin' 
		uci add_list web.ajaxgatewaytab.roles='engineer'
		uci add_list web.ajaxgatewaytab.roles='guest'
		uci add_list web.ruleset_main.rules='ajaxgatewaytab'
	fi
	if [ ! $(uci get -q web.ajaxinternet) ]; then
		uci set web.ajaxinternet=rule
		uci set web.ajaxinternet.target='/ajax/internet.lua'
		uci add_list web.ajaxinternet.roles='admin' 
		uci add_list web.ajaxinternet.roles='engineer'
		uci add_list web.ajaxinternet.roles='guest'
		uci add_list web.ruleset_main.rules='ajaxinternet'
	fi
	if [ ! $(uci get -q web.diagnosticsxdslgraphicsmodal) ]; then
		uci set web.diagnosticsxdslgraphicsmodal=rule
		uci set web.diagnosticsxdslgraphicsmodal.target='/modals/diagnostics-xdsl-graphics-modal.lp'
		uci add_list web.diagnosticsxdslgraphicsmodal.roles='admin' 
		uci add_list web.diagnosticsxdslgraphicsmodal.roles='engineer'
		uci add_list web.diagnosticsxdslgraphicsmodal.roles='guest'
		uci add_list web.ruleset_main.rules='diagnosticsxdslgraphicsmodal'
	fi
	if [ ! $(uci get -q web.mwanmodal) ]; then
		uci set web.mwanmodal=rule
		uci set web.mwanmodal.target='/modals/mwan-modal.lp'
		uci add_list web.mwanmodal.roles='admin' 
		uci add_list web.mwanmodal.roles='engineer'
		uci add_list web.ruleset_main.rules='mwanmodal'
	fi
}

check_relay_dhcp() {
	if [ ! $(uci get -q dhcp.relay) ]; then
		uci set dhcp.relay=relay
	fi
}

suppress_excessive_logging() {
	if [ $(uci get -q igmpproxy.globals.trace) == "1" ]; then
		uci set igmpproxy.globals.trace='0'
	fi
	/etc/init.d/mobiled restart #Restart this to actually disable it... (broken and shitt init.d)
	if [ $(uci get -q wansensing.global.tracelevel) == "1" ]; then #we don't need that we are still connected to vdsl -.-
		uci set wansensing.global.tracelevel='3'
	fi
	if [ ! $(uci get -q transformer.@main[0].log_level) ]; then #shutup no description warn
		uci set transformer.@main[0].log_level='2'
	fi
	if [ ! $(uci get -q system.@system[0].cronloglevel) ] || [ $(uci get -q system.@system[0].cronloglevel) == '0' ]; then #resolve spamlog of trafficdata
		uci set system.@system[0].cronloglevel="5"
		/etc/init.d/cron restart
	fi
	if [ ! $(uci get -q ledfw.syslog) ]; then #suppress loggin of ledfw... we don't need it...
		uci set ledfw.syslog=syslog
		uci set ledfw.syslog.trace='0'
	fi
}

check_aria_dir() {
	if [ -d /etc/config/aria2 ]; then #Fix generation of config
		mv /etc/config/aria2 /etc/aria2
	fi
	if [ "$(pgrep aria2)" ]; then
		killall aria2c
		aria2c --enable-rpc --rpc-listen-all=true --rpc-allow-origin-all --daemon=true --conf-path=/etc/aria2/aria2.conf
	fi
}

led_integration() {
	if [ $(uci get -q ledfw.status_led.enable) ] ; then
		uci set ledfw.status_led.enable='0'
	fi
}

check_wansensing() {
	if [ -d /usr/lib/lua/wansensing ] && [ ! -d /usr/lib/lua/wansensingfw ] ; then
		rm /usr/lib/lua/wansensing/scripthelpers.lua
		mv /usr/lib/lua/wansensingfw/scripthelpers.lua /usr/lib/lua/wansensing/scripthelpers.lua
		rm -r /usr/lib/lua/wansensing
	fi
}

remove_downgrade_bit() {
	if [ $(uci get -q env.rip.board_mnemonic) == "VBNT-S" ] && [ $(uci get -q env.var.prod_number) == "4132" ] && [ -f /proc/rip/0123 ]; then
		logger "Downgrade limitation bit detected... Removing.."
		rmmod keymanager
		rmmod ripdrv
		mv /lib/modules/3.4.11/ripdrv.ko /lib/modules/3.4.11/ripdrv.ko_back
		mv /root/ripdrv.ko /lib/modules/3.4.11/ripdrv.ko
		insmod ripdrv
		echo 0123 > /proc/rip/delete
		echo 0122 > /proc/rip/delete
		rmmod ripdrv
		logger "Restoring original driver"
		rm /lib/modules/3.4.11/ripdrv.ko
		mv /lib/modules/3.4.11/ripdrv.ko_back /lib/modules/3.4.11/ripdrv.ko
		insmod ripdrv
		insmod keymanager
	elif [ -f /root/ripdrv.ko ]; then
		rm /root/ripdrv.ko
	fi
}

apply_right_opkg_repo() {
	if [ -f /etc/opkg.conf_17.3 ]; then
		local marketing_version=$(uci get -q version.@version[0].marketing_version)
		if [ $marketing_version ]; then
			if [ $marketing_version == "17.3" ]; then
				if [ -f /etc/okpg.conf ]; then
					rm /etc/okpg.conf
				fi
				mv /etc/opkg.conf_17.3 /etc/opkg.conf
				rm /etc/opkg.conf_16.3
			else
				if [ -f /etc/okpg.conf ]; then
					rm /etc/okpg.conf
				fi
				mv /etc/opkg.conf_16.3 /etc/opkg.conf
				rm /etc/opkg.conf_17.3
			fi
		fi
	fi
}

root() {
	
	/etc/init.d/watchdog-tch stop
	logger "Disable watchdog"
	
	logger "Start rooting"
	if [ ! -f /root/.check_process ]; then #this check if the placeholder exist
		touch /root/.check_process #this is a placeholder to know if the process ends correctly
	fi
	
	logger "Stopping nginx and transformer"
	if [ "$(pgrep "nginx")" ]; then
		/etc/init.d/nginx stop
	fi
		
	logger "Checking if we are on TIM configuration"
	if [ $(uci -q get env.var.isp) ]; then
		if [ $(uci get -q env.var.isp) = "TIM" ]; then #this add specific config for TIM
			add_ipv6
			add_ppp_mgmt
			add_telecom_stock_dns
		else
			purify_from_tim
		fi
	fi
	
	logger "Unlocking web interface if needed"
	if [ -f /etc/config/web_unlock ]; then
		if [ ! $(uci get -q web.changelog) ] || [ ! $(uci get -q web.mmpbxstatisticsmodal) ] ; then
			mv /etc/config/web /etc/config/web_back #backup of the stock web config
			mv /etc/config/web_unlock /etc/config/web #apply unlocked universal config
		else
			rm /etc/config/web_unlock
		fi
	fi
	
	logger "Check and cleanup"
	add_ipoe #this need to stay to make the wizard work correctly
	logger "Remove default dns"
	remove_default_dns #tim sets his dns on to of the loopback interface 
	logger "Purify wan"
	puryfy_wan_interface #remove gracefull restart, could give problem
	logger "Fix dns bug"
	fix_dns_dhcp_bug #disable odhcpd as ipv6 is currently broken 
	logger "Enable dlnad"
	check_new_dlnad #this enable a new dlna deamon introduced with 17.1, the old one is keep
	logger "Fix Sysupgrade"
	check_upgrade_shit #this if old script are present to fix sysupgrade
	logger "Check orig config"
	orig_config_gen #this check if new config are already present
	logger "Trafficmon inizialization"
	trafficmon_support #support trafficmon
	logger "Restore original mapper"
	restore_original_mapper #this restore the original file autogenerated as they are specific to the build version.
	logger "Transformer lib check"
	transformer_lib_check #another cleanup
	logger "Remove https check"
	remove_https_check_cwmpd #cleanup
	logger "Check css presence"
	check_uci_gui_skin #check css
	logger "Check if dnsmasq is names as we need it for the webui"
	check_dnsmasq_name #check dnsmasq name in uci
	uci set dhcp.dnsmasq=dnsmasq
	logger "Check driver setting"
	create_driver_setting #create diver setting if not present
	logger "Check Dropbear config file"
	dropbear_file_check  #check dropbear config
	logger "Check ddns directory"
	check_noip_file #check ddns directory in /etc
	logger "Check eco param"
	disable_eco_param #This disable eco param as they introduce some latency
	logger "Enable new upnp"
	enable_new_upnp #New upnp fix
	logger "Sync dhcp configuration for new webui"
	update_dhcp_config #Dhcp sync
	logger "Create gui type in config"
	create_gui_type #Gui Type
	logger "Add new web option"
	add_new_web_rule #This check new option so that we don't replace the one present
	logger "New DHCPRelay Option"
	check_relay_dhcp #Sync option
	logger "Disable trace from igmpproxy"
	suppress_excessive_logging #Suppress logging
	logger "Moving aria2 dir"
	check_aria_dir #Fix config function
	logger "Creating new option for led definition"
	led_integration #New option led
	logger "Old build detected, moving wansensing file"
	check_wansensing # Move wansensing file to old directory
	logger "Checking downgrade limitation bit"
	remove_downgrade_bit #Use custom driver to remove this... thx @Roleo
	logger "Checking opkg conf"
	apply_right_opkg_repo #Check opkg conf based on version
	
	logger "Setting root flag"
	uci set system.config.rooted='1' #this crate a flag in the config to know if it's rooted or not

	logger "Disable reboot after crash, this gives race condition..."
	uci set system.@coredump[0].reboot='0'
	
	logger "Save root password if modified"
	if [ ! $(awk -F: '/root/ {print $7 }' /etc/passwd) = "/bin/ash" ]; then #this enable root access from login
		sed -i '1croot:x:0:0:root:/root:/bin/ash' /etc/passwd
	fi
	if [ ! $encrypted_pass = $default_encrypted_pass ] && [ -z $saved_encrypted_pass ]; then #all of this is to check the root 
		echo -e "root\nroot" | passwd >/dev/nul
		echo "  Setting root password" > /dev/console
		save_root_encrypt_pass #this save the password to the env config file
	else
		if [ $encrypted_pass = $default_encrypted_pass ]; then
			echo "  Root password detected" > /dev/console
		else
			if [ $encrypted_pass = $saved_encrypted_pass ]; then
				echo "  Changed root password detected!" > /dev/console
			else
				echo "  New password detected!" > /dev/console
				save_root_encrypt_pass
			fi
		fi
	fi
	
	if [ ! $(uci get -q env.var.bank_check) ]; then #this set bank_check bit if not present
		uci set env.var.bank_check="1"
	fi
	
	logger "Setting dropbear settings"
	uci set dropbear.@dropbear[0].RootPasswordAuth='on' #dropbear root related
	uci set dropbear.@dropbear[0].PasswordAuth='on'
	uci set dropbear.@dropbear[0].enable='1'
	
	uci set wireless.global.wifi_analyzer_disable='0' #AGTEF specific
	
	if [ -f /tmp/GUI.tar.bz2 ] || [ -f /root/GUI.tar.bz2 ] || 
	   [ -f /tmp/GUI_dev.tar.bz2 ] || [ -f /root/GUI_dev.tar.bz2 ];then #this generate hash to know if the gui is outdated or not
		generate_hash_gui
	fi
	
	logger "Sync version"
	if [ -f /usr/share/transformer/scripts/checkver.sh ]; then
		checkver_cron
	fi
	
	logger "Apply modification"
	uci commit
	
	logger "Restart power init"
	/etc/init.d/power restart
	
	logger "Restarting dropbear"
	/etc/init.d/dropbear restart
	
	logger "Restarting dnsmasq"
	/etc/init.d/dnsmasq restart
	
	rm /root/.check_process #we remove the placeholder as the process is complete
	logger "Process done."
	echo "  Process done. Your modem is now rooted!" > /dev/console
	
	if [ $(uci -q get env.var.isp) ]; then
		if [ $(uci -q get env.var.isp) != "TIM" ]; then #this disable cwmpd if it's not tim...
			uci set cwmpd.cwmpd_config.state='0'
			if [ $(uci get -q cwmpd.cwmpd_config.state) = "1" ]; then
				if [ -f /var/run/cwmpd.pid ]; then
					/etc/init.d/cwmpd stop
				fi
				/etc/init.d/cwmpd disable
			fi
		else
			new_platform=https://regman-mon.interbusiness.it:10800/acs/
			if [ ! "$(curl -s -k $new_platform)" ] ; then
				uci set cwmpd.cwmpd_config.acs_url=https://regman-tl.interbusiness.it:10700/acs/ 
			else
				uci set cwmpd.cwmpd_config.acs_url=https://regman-mon.interbusiness.it:10800/acs/
			fi
			if [ $(uci get -q cwmpd.cwmpd_config.interface) != "wan" ]; then
				uci set cwmpd.cwmpd_config.interface='wan'
			fi
			uci commit
			/etc/init.d/cwmpd enable
			if [ ! -f /var/run/cwmpd.pid ]; then
				/etc/init.d/cwmpd start
			else
				/etc/init.d/cwmpd restart
			fi
		fi
	fi
	
	logger "Restarting transformer"
	/etc/init.d/transformer restart
	sleep 20
	logger "Restarting nginx"
	/etc/init.d/nginx start
	logger "Restarting transformer a second time cause it's just shit..."
	/etc/init.d/transformer restart
	
	/etc/init.d/watchdog-tch start
	
	logger "Resetting cwmp and watchdog"
}

boot() {
    logo_project
	check_root
	check_gui_ver
	check_isp_config
	create_symlink
	wifi_fix_24g
	if [ $rooted -ne 1 ]; then
		echo "  Root not detected! Rooting..." > /dev/console
		root
	else
		if [ -f /root/.check_process ]; then
			echo "  Root detected but process not terminated well! Rerooting..." > /dev/console
			root
		else
			if [ $force -eq 1 ]; then
				echo "  Root detected but force flag detected! Rerooting..." > /dev/console
				root
			else
				echo "  Root detected! Doing nothing." > /dev/console
			fi
		fi
	fi
	check_bank
	echo " ----------------------------------------------------- " > /dev/console
}
